// Code generated by counterfeiter. DO NOT EDIT.
package mocks

import (
	"context"
	"sync"

	"github.com/aws/aws-sdk-go/aws/request"
	"github.com/aws/aws-sdk-go/service/cloudwatch"
	"github.com/aws/aws-sdk-go/service/cloudwatch/cloudwatchiface"
)

type FakeCloudWatchAPI struct {
	DeleteAlarmsStub        func(*cloudwatch.DeleteAlarmsInput) (*cloudwatch.DeleteAlarmsOutput, error)
	deleteAlarmsMutex       sync.RWMutex
	deleteAlarmsArgsForCall []struct {
		arg1 *cloudwatch.DeleteAlarmsInput
	}
	deleteAlarmsReturns struct {
		result1 *cloudwatch.DeleteAlarmsOutput
		result2 error
	}
	deleteAlarmsReturnsOnCall map[int]struct {
		result1 *cloudwatch.DeleteAlarmsOutput
		result2 error
	}
	DeleteAlarmsRequestStub        func(*cloudwatch.DeleteAlarmsInput) (*request.Request, *cloudwatch.DeleteAlarmsOutput)
	deleteAlarmsRequestMutex       sync.RWMutex
	deleteAlarmsRequestArgsForCall []struct {
		arg1 *cloudwatch.DeleteAlarmsInput
	}
	deleteAlarmsRequestReturns struct {
		result1 *request.Request
		result2 *cloudwatch.DeleteAlarmsOutput
	}
	deleteAlarmsRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *cloudwatch.DeleteAlarmsOutput
	}
	DeleteAlarmsWithContextStub        func(context.Context, *cloudwatch.DeleteAlarmsInput, ...request.Option) (*cloudwatch.DeleteAlarmsOutput, error)
	deleteAlarmsWithContextMutex       sync.RWMutex
	deleteAlarmsWithContextArgsForCall []struct {
		arg1 context.Context
		arg2 *cloudwatch.DeleteAlarmsInput
		arg3 []request.Option
	}
	deleteAlarmsWithContextReturns struct {
		result1 *cloudwatch.DeleteAlarmsOutput
		result2 error
	}
	deleteAlarmsWithContextReturnsOnCall map[int]struct {
		result1 *cloudwatch.DeleteAlarmsOutput
		result2 error
	}
	DeleteDashboardsStub        func(*cloudwatch.DeleteDashboardsInput) (*cloudwatch.DeleteDashboardsOutput, error)
	deleteDashboardsMutex       sync.RWMutex
	deleteDashboardsArgsForCall []struct {
		arg1 *cloudwatch.DeleteDashboardsInput
	}
	deleteDashboardsReturns struct {
		result1 *cloudwatch.DeleteDashboardsOutput
		result2 error
	}
	deleteDashboardsReturnsOnCall map[int]struct {
		result1 *cloudwatch.DeleteDashboardsOutput
		result2 error
	}
	DeleteDashboardsRequestStub        func(*cloudwatch.DeleteDashboardsInput) (*request.Request, *cloudwatch.DeleteDashboardsOutput)
	deleteDashboardsRequestMutex       sync.RWMutex
	deleteDashboardsRequestArgsForCall []struct {
		arg1 *cloudwatch.DeleteDashboardsInput
	}
	deleteDashboardsRequestReturns struct {
		result1 *request.Request
		result2 *cloudwatch.DeleteDashboardsOutput
	}
	deleteDashboardsRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *cloudwatch.DeleteDashboardsOutput
	}
	DeleteDashboardsWithContextStub        func(context.Context, *cloudwatch.DeleteDashboardsInput, ...request.Option) (*cloudwatch.DeleteDashboardsOutput, error)
	deleteDashboardsWithContextMutex       sync.RWMutex
	deleteDashboardsWithContextArgsForCall []struct {
		arg1 context.Context
		arg2 *cloudwatch.DeleteDashboardsInput
		arg3 []request.Option
	}
	deleteDashboardsWithContextReturns struct {
		result1 *cloudwatch.DeleteDashboardsOutput
		result2 error
	}
	deleteDashboardsWithContextReturnsOnCall map[int]struct {
		result1 *cloudwatch.DeleteDashboardsOutput
		result2 error
	}
	DescribeAlarmHistoryStub        func(*cloudwatch.DescribeAlarmHistoryInput) (*cloudwatch.DescribeAlarmHistoryOutput, error)
	describeAlarmHistoryMutex       sync.RWMutex
	describeAlarmHistoryArgsForCall []struct {
		arg1 *cloudwatch.DescribeAlarmHistoryInput
	}
	describeAlarmHistoryReturns struct {
		result1 *cloudwatch.DescribeAlarmHistoryOutput
		result2 error
	}
	describeAlarmHistoryReturnsOnCall map[int]struct {
		result1 *cloudwatch.DescribeAlarmHistoryOutput
		result2 error
	}
	DescribeAlarmHistoryPagesStub        func(*cloudwatch.DescribeAlarmHistoryInput, func(*cloudwatch.DescribeAlarmHistoryOutput, bool) bool) error
	describeAlarmHistoryPagesMutex       sync.RWMutex
	describeAlarmHistoryPagesArgsForCall []struct {
		arg1 *cloudwatch.DescribeAlarmHistoryInput
		arg2 func(*cloudwatch.DescribeAlarmHistoryOutput, bool) bool
	}
	describeAlarmHistoryPagesReturns struct {
		result1 error
	}
	describeAlarmHistoryPagesReturnsOnCall map[int]struct {
		result1 error
	}
	DescribeAlarmHistoryPagesWithContextStub        func(context.Context, *cloudwatch.DescribeAlarmHistoryInput, func(*cloudwatch.DescribeAlarmHistoryOutput, bool) bool, ...request.Option) error
	describeAlarmHistoryPagesWithContextMutex       sync.RWMutex
	describeAlarmHistoryPagesWithContextArgsForCall []struct {
		arg1 context.Context
		arg2 *cloudwatch.DescribeAlarmHistoryInput
		arg3 func(*cloudwatch.DescribeAlarmHistoryOutput, bool) bool
		arg4 []request.Option
	}
	describeAlarmHistoryPagesWithContextReturns struct {
		result1 error
	}
	describeAlarmHistoryPagesWithContextReturnsOnCall map[int]struct {
		result1 error
	}
	DescribeAlarmHistoryRequestStub        func(*cloudwatch.DescribeAlarmHistoryInput) (*request.Request, *cloudwatch.DescribeAlarmHistoryOutput)
	describeAlarmHistoryRequestMutex       sync.RWMutex
	describeAlarmHistoryRequestArgsForCall []struct {
		arg1 *cloudwatch.DescribeAlarmHistoryInput
	}
	describeAlarmHistoryRequestReturns struct {
		result1 *request.Request
		result2 *cloudwatch.DescribeAlarmHistoryOutput
	}
	describeAlarmHistoryRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *cloudwatch.DescribeAlarmHistoryOutput
	}
	DescribeAlarmHistoryWithContextStub        func(context.Context, *cloudwatch.DescribeAlarmHistoryInput, ...request.Option) (*cloudwatch.DescribeAlarmHistoryOutput, error)
	describeAlarmHistoryWithContextMutex       sync.RWMutex
	describeAlarmHistoryWithContextArgsForCall []struct {
		arg1 context.Context
		arg2 *cloudwatch.DescribeAlarmHistoryInput
		arg3 []request.Option
	}
	describeAlarmHistoryWithContextReturns struct {
		result1 *cloudwatch.DescribeAlarmHistoryOutput
		result2 error
	}
	describeAlarmHistoryWithContextReturnsOnCall map[int]struct {
		result1 *cloudwatch.DescribeAlarmHistoryOutput
		result2 error
	}
	DescribeAlarmsStub        func(*cloudwatch.DescribeAlarmsInput) (*cloudwatch.DescribeAlarmsOutput, error)
	describeAlarmsMutex       sync.RWMutex
	describeAlarmsArgsForCall []struct {
		arg1 *cloudwatch.DescribeAlarmsInput
	}
	describeAlarmsReturns struct {
		result1 *cloudwatch.DescribeAlarmsOutput
		result2 error
	}
	describeAlarmsReturnsOnCall map[int]struct {
		result1 *cloudwatch.DescribeAlarmsOutput
		result2 error
	}
	DescribeAlarmsForMetricStub        func(*cloudwatch.DescribeAlarmsForMetricInput) (*cloudwatch.DescribeAlarmsForMetricOutput, error)
	describeAlarmsForMetricMutex       sync.RWMutex
	describeAlarmsForMetricArgsForCall []struct {
		arg1 *cloudwatch.DescribeAlarmsForMetricInput
	}
	describeAlarmsForMetricReturns struct {
		result1 *cloudwatch.DescribeAlarmsForMetricOutput
		result2 error
	}
	describeAlarmsForMetricReturnsOnCall map[int]struct {
		result1 *cloudwatch.DescribeAlarmsForMetricOutput
		result2 error
	}
	DescribeAlarmsForMetricRequestStub        func(*cloudwatch.DescribeAlarmsForMetricInput) (*request.Request, *cloudwatch.DescribeAlarmsForMetricOutput)
	describeAlarmsForMetricRequestMutex       sync.RWMutex
	describeAlarmsForMetricRequestArgsForCall []struct {
		arg1 *cloudwatch.DescribeAlarmsForMetricInput
	}
	describeAlarmsForMetricRequestReturns struct {
		result1 *request.Request
		result2 *cloudwatch.DescribeAlarmsForMetricOutput
	}
	describeAlarmsForMetricRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *cloudwatch.DescribeAlarmsForMetricOutput
	}
	DescribeAlarmsForMetricWithContextStub        func(context.Context, *cloudwatch.DescribeAlarmsForMetricInput, ...request.Option) (*cloudwatch.DescribeAlarmsForMetricOutput, error)
	describeAlarmsForMetricWithContextMutex       sync.RWMutex
	describeAlarmsForMetricWithContextArgsForCall []struct {
		arg1 context.Context
		arg2 *cloudwatch.DescribeAlarmsForMetricInput
		arg3 []request.Option
	}
	describeAlarmsForMetricWithContextReturns struct {
		result1 *cloudwatch.DescribeAlarmsForMetricOutput
		result2 error
	}
	describeAlarmsForMetricWithContextReturnsOnCall map[int]struct {
		result1 *cloudwatch.DescribeAlarmsForMetricOutput
		result2 error
	}
	DescribeAlarmsPagesStub        func(*cloudwatch.DescribeAlarmsInput, func(*cloudwatch.DescribeAlarmsOutput, bool) bool) error
	describeAlarmsPagesMutex       sync.RWMutex
	describeAlarmsPagesArgsForCall []struct {
		arg1 *cloudwatch.DescribeAlarmsInput
		arg2 func(*cloudwatch.DescribeAlarmsOutput, bool) bool
	}
	describeAlarmsPagesReturns struct {
		result1 error
	}
	describeAlarmsPagesReturnsOnCall map[int]struct {
		result1 error
	}
	DescribeAlarmsPagesWithContextStub        func(context.Context, *cloudwatch.DescribeAlarmsInput, func(*cloudwatch.DescribeAlarmsOutput, bool) bool, ...request.Option) error
	describeAlarmsPagesWithContextMutex       sync.RWMutex
	describeAlarmsPagesWithContextArgsForCall []struct {
		arg1 context.Context
		arg2 *cloudwatch.DescribeAlarmsInput
		arg3 func(*cloudwatch.DescribeAlarmsOutput, bool) bool
		arg4 []request.Option
	}
	describeAlarmsPagesWithContextReturns struct {
		result1 error
	}
	describeAlarmsPagesWithContextReturnsOnCall map[int]struct {
		result1 error
	}
	DescribeAlarmsRequestStub        func(*cloudwatch.DescribeAlarmsInput) (*request.Request, *cloudwatch.DescribeAlarmsOutput)
	describeAlarmsRequestMutex       sync.RWMutex
	describeAlarmsRequestArgsForCall []struct {
		arg1 *cloudwatch.DescribeAlarmsInput
	}
	describeAlarmsRequestReturns struct {
		result1 *request.Request
		result2 *cloudwatch.DescribeAlarmsOutput
	}
	describeAlarmsRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *cloudwatch.DescribeAlarmsOutput
	}
	DescribeAlarmsWithContextStub        func(context.Context, *cloudwatch.DescribeAlarmsInput, ...request.Option) (*cloudwatch.DescribeAlarmsOutput, error)
	describeAlarmsWithContextMutex       sync.RWMutex
	describeAlarmsWithContextArgsForCall []struct {
		arg1 context.Context
		arg2 *cloudwatch.DescribeAlarmsInput
		arg3 []request.Option
	}
	describeAlarmsWithContextReturns struct {
		result1 *cloudwatch.DescribeAlarmsOutput
		result2 error
	}
	describeAlarmsWithContextReturnsOnCall map[int]struct {
		result1 *cloudwatch.DescribeAlarmsOutput
		result2 error
	}
	DisableAlarmActionsStub        func(*cloudwatch.DisableAlarmActionsInput) (*cloudwatch.DisableAlarmActionsOutput, error)
	disableAlarmActionsMutex       sync.RWMutex
	disableAlarmActionsArgsForCall []struct {
		arg1 *cloudwatch.DisableAlarmActionsInput
	}
	disableAlarmActionsReturns struct {
		result1 *cloudwatch.DisableAlarmActionsOutput
		result2 error
	}
	disableAlarmActionsReturnsOnCall map[int]struct {
		result1 *cloudwatch.DisableAlarmActionsOutput
		result2 error
	}
	DisableAlarmActionsRequestStub        func(*cloudwatch.DisableAlarmActionsInput) (*request.Request, *cloudwatch.DisableAlarmActionsOutput)
	disableAlarmActionsRequestMutex       sync.RWMutex
	disableAlarmActionsRequestArgsForCall []struct {
		arg1 *cloudwatch.DisableAlarmActionsInput
	}
	disableAlarmActionsRequestReturns struct {
		result1 *request.Request
		result2 *cloudwatch.DisableAlarmActionsOutput
	}
	disableAlarmActionsRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *cloudwatch.DisableAlarmActionsOutput
	}
	DisableAlarmActionsWithContextStub        func(context.Context, *cloudwatch.DisableAlarmActionsInput, ...request.Option) (*cloudwatch.DisableAlarmActionsOutput, error)
	disableAlarmActionsWithContextMutex       sync.RWMutex
	disableAlarmActionsWithContextArgsForCall []struct {
		arg1 context.Context
		arg2 *cloudwatch.DisableAlarmActionsInput
		arg3 []request.Option
	}
	disableAlarmActionsWithContextReturns struct {
		result1 *cloudwatch.DisableAlarmActionsOutput
		result2 error
	}
	disableAlarmActionsWithContextReturnsOnCall map[int]struct {
		result1 *cloudwatch.DisableAlarmActionsOutput
		result2 error
	}
	EnableAlarmActionsStub        func(*cloudwatch.EnableAlarmActionsInput) (*cloudwatch.EnableAlarmActionsOutput, error)
	enableAlarmActionsMutex       sync.RWMutex
	enableAlarmActionsArgsForCall []struct {
		arg1 *cloudwatch.EnableAlarmActionsInput
	}
	enableAlarmActionsReturns struct {
		result1 *cloudwatch.EnableAlarmActionsOutput
		result2 error
	}
	enableAlarmActionsReturnsOnCall map[int]struct {
		result1 *cloudwatch.EnableAlarmActionsOutput
		result2 error
	}
	EnableAlarmActionsRequestStub        func(*cloudwatch.EnableAlarmActionsInput) (*request.Request, *cloudwatch.EnableAlarmActionsOutput)
	enableAlarmActionsRequestMutex       sync.RWMutex
	enableAlarmActionsRequestArgsForCall []struct {
		arg1 *cloudwatch.EnableAlarmActionsInput
	}
	enableAlarmActionsRequestReturns struct {
		result1 *request.Request
		result2 *cloudwatch.EnableAlarmActionsOutput
	}
	enableAlarmActionsRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *cloudwatch.EnableAlarmActionsOutput
	}
	EnableAlarmActionsWithContextStub        func(context.Context, *cloudwatch.EnableAlarmActionsInput, ...request.Option) (*cloudwatch.EnableAlarmActionsOutput, error)
	enableAlarmActionsWithContextMutex       sync.RWMutex
	enableAlarmActionsWithContextArgsForCall []struct {
		arg1 context.Context
		arg2 *cloudwatch.EnableAlarmActionsInput
		arg3 []request.Option
	}
	enableAlarmActionsWithContextReturns struct {
		result1 *cloudwatch.EnableAlarmActionsOutput
		result2 error
	}
	enableAlarmActionsWithContextReturnsOnCall map[int]struct {
		result1 *cloudwatch.EnableAlarmActionsOutput
		result2 error
	}
	GetDashboardStub        func(*cloudwatch.GetDashboardInput) (*cloudwatch.GetDashboardOutput, error)
	getDashboardMutex       sync.RWMutex
	getDashboardArgsForCall []struct {
		arg1 *cloudwatch.GetDashboardInput
	}
	getDashboardReturns struct {
		result1 *cloudwatch.GetDashboardOutput
		result2 error
	}
	getDashboardReturnsOnCall map[int]struct {
		result1 *cloudwatch.GetDashboardOutput
		result2 error
	}
	GetDashboardRequestStub        func(*cloudwatch.GetDashboardInput) (*request.Request, *cloudwatch.GetDashboardOutput)
	getDashboardRequestMutex       sync.RWMutex
	getDashboardRequestArgsForCall []struct {
		arg1 *cloudwatch.GetDashboardInput
	}
	getDashboardRequestReturns struct {
		result1 *request.Request
		result2 *cloudwatch.GetDashboardOutput
	}
	getDashboardRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *cloudwatch.GetDashboardOutput
	}
	GetDashboardWithContextStub        func(context.Context, *cloudwatch.GetDashboardInput, ...request.Option) (*cloudwatch.GetDashboardOutput, error)
	getDashboardWithContextMutex       sync.RWMutex
	getDashboardWithContextArgsForCall []struct {
		arg1 context.Context
		arg2 *cloudwatch.GetDashboardInput
		arg3 []request.Option
	}
	getDashboardWithContextReturns struct {
		result1 *cloudwatch.GetDashboardOutput
		result2 error
	}
	getDashboardWithContextReturnsOnCall map[int]struct {
		result1 *cloudwatch.GetDashboardOutput
		result2 error
	}
	GetMetricDataStub        func(*cloudwatch.GetMetricDataInput) (*cloudwatch.GetMetricDataOutput, error)
	getMetricDataMutex       sync.RWMutex
	getMetricDataArgsForCall []struct {
		arg1 *cloudwatch.GetMetricDataInput
	}
	getMetricDataReturns struct {
		result1 *cloudwatch.GetMetricDataOutput
		result2 error
	}
	getMetricDataReturnsOnCall map[int]struct {
		result1 *cloudwatch.GetMetricDataOutput
		result2 error
	}
	GetMetricDataRequestStub        func(*cloudwatch.GetMetricDataInput) (*request.Request, *cloudwatch.GetMetricDataOutput)
	getMetricDataRequestMutex       sync.RWMutex
	getMetricDataRequestArgsForCall []struct {
		arg1 *cloudwatch.GetMetricDataInput
	}
	getMetricDataRequestReturns struct {
		result1 *request.Request
		result2 *cloudwatch.GetMetricDataOutput
	}
	getMetricDataRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *cloudwatch.GetMetricDataOutput
	}
	GetMetricDataWithContextStub        func(context.Context, *cloudwatch.GetMetricDataInput, ...request.Option) (*cloudwatch.GetMetricDataOutput, error)
	getMetricDataWithContextMutex       sync.RWMutex
	getMetricDataWithContextArgsForCall []struct {
		arg1 context.Context
		arg2 *cloudwatch.GetMetricDataInput
		arg3 []request.Option
	}
	getMetricDataWithContextReturns struct {
		result1 *cloudwatch.GetMetricDataOutput
		result2 error
	}
	getMetricDataWithContextReturnsOnCall map[int]struct {
		result1 *cloudwatch.GetMetricDataOutput
		result2 error
	}
	GetMetricStatisticsStub        func(*cloudwatch.GetMetricStatisticsInput) (*cloudwatch.GetMetricStatisticsOutput, error)
	getMetricStatisticsMutex       sync.RWMutex
	getMetricStatisticsArgsForCall []struct {
		arg1 *cloudwatch.GetMetricStatisticsInput
	}
	getMetricStatisticsReturns struct {
		result1 *cloudwatch.GetMetricStatisticsOutput
		result2 error
	}
	getMetricStatisticsReturnsOnCall map[int]struct {
		result1 *cloudwatch.GetMetricStatisticsOutput
		result2 error
	}
	GetMetricStatisticsRequestStub        func(*cloudwatch.GetMetricStatisticsInput) (*request.Request, *cloudwatch.GetMetricStatisticsOutput)
	getMetricStatisticsRequestMutex       sync.RWMutex
	getMetricStatisticsRequestArgsForCall []struct {
		arg1 *cloudwatch.GetMetricStatisticsInput
	}
	getMetricStatisticsRequestReturns struct {
		result1 *request.Request
		result2 *cloudwatch.GetMetricStatisticsOutput
	}
	getMetricStatisticsRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *cloudwatch.GetMetricStatisticsOutput
	}
	GetMetricStatisticsWithContextStub        func(context.Context, *cloudwatch.GetMetricStatisticsInput, ...request.Option) (*cloudwatch.GetMetricStatisticsOutput, error)
	getMetricStatisticsWithContextMutex       sync.RWMutex
	getMetricStatisticsWithContextArgsForCall []struct {
		arg1 context.Context
		arg2 *cloudwatch.GetMetricStatisticsInput
		arg3 []request.Option
	}
	getMetricStatisticsWithContextReturns struct {
		result1 *cloudwatch.GetMetricStatisticsOutput
		result2 error
	}
	getMetricStatisticsWithContextReturnsOnCall map[int]struct {
		result1 *cloudwatch.GetMetricStatisticsOutput
		result2 error
	}
	GetMetricWidgetImageStub        func(*cloudwatch.GetMetricWidgetImageInput) (*cloudwatch.GetMetricWidgetImageOutput, error)
	getMetricWidgetImageMutex       sync.RWMutex
	getMetricWidgetImageArgsForCall []struct {
		arg1 *cloudwatch.GetMetricWidgetImageInput
	}
	getMetricWidgetImageReturns struct {
		result1 *cloudwatch.GetMetricWidgetImageOutput
		result2 error
	}
	getMetricWidgetImageReturnsOnCall map[int]struct {
		result1 *cloudwatch.GetMetricWidgetImageOutput
		result2 error
	}
	GetMetricWidgetImageRequestStub        func(*cloudwatch.GetMetricWidgetImageInput) (*request.Request, *cloudwatch.GetMetricWidgetImageOutput)
	getMetricWidgetImageRequestMutex       sync.RWMutex
	getMetricWidgetImageRequestArgsForCall []struct {
		arg1 *cloudwatch.GetMetricWidgetImageInput
	}
	getMetricWidgetImageRequestReturns struct {
		result1 *request.Request
		result2 *cloudwatch.GetMetricWidgetImageOutput
	}
	getMetricWidgetImageRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *cloudwatch.GetMetricWidgetImageOutput
	}
	GetMetricWidgetImageWithContextStub        func(context.Context, *cloudwatch.GetMetricWidgetImageInput, ...request.Option) (*cloudwatch.GetMetricWidgetImageOutput, error)
	getMetricWidgetImageWithContextMutex       sync.RWMutex
	getMetricWidgetImageWithContextArgsForCall []struct {
		arg1 context.Context
		arg2 *cloudwatch.GetMetricWidgetImageInput
		arg3 []request.Option
	}
	getMetricWidgetImageWithContextReturns struct {
		result1 *cloudwatch.GetMetricWidgetImageOutput
		result2 error
	}
	getMetricWidgetImageWithContextReturnsOnCall map[int]struct {
		result1 *cloudwatch.GetMetricWidgetImageOutput
		result2 error
	}
	ListDashboardsStub        func(*cloudwatch.ListDashboardsInput) (*cloudwatch.ListDashboardsOutput, error)
	listDashboardsMutex       sync.RWMutex
	listDashboardsArgsForCall []struct {
		arg1 *cloudwatch.ListDashboardsInput
	}
	listDashboardsReturns struct {
		result1 *cloudwatch.ListDashboardsOutput
		result2 error
	}
	listDashboardsReturnsOnCall map[int]struct {
		result1 *cloudwatch.ListDashboardsOutput
		result2 error
	}
	ListDashboardsRequestStub        func(*cloudwatch.ListDashboardsInput) (*request.Request, *cloudwatch.ListDashboardsOutput)
	listDashboardsRequestMutex       sync.RWMutex
	listDashboardsRequestArgsForCall []struct {
		arg1 *cloudwatch.ListDashboardsInput
	}
	listDashboardsRequestReturns struct {
		result1 *request.Request
		result2 *cloudwatch.ListDashboardsOutput
	}
	listDashboardsRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *cloudwatch.ListDashboardsOutput
	}
	ListDashboardsWithContextStub        func(context.Context, *cloudwatch.ListDashboardsInput, ...request.Option) (*cloudwatch.ListDashboardsOutput, error)
	listDashboardsWithContextMutex       sync.RWMutex
	listDashboardsWithContextArgsForCall []struct {
		arg1 context.Context
		arg2 *cloudwatch.ListDashboardsInput
		arg3 []request.Option
	}
	listDashboardsWithContextReturns struct {
		result1 *cloudwatch.ListDashboardsOutput
		result2 error
	}
	listDashboardsWithContextReturnsOnCall map[int]struct {
		result1 *cloudwatch.ListDashboardsOutput
		result2 error
	}
	ListMetricsStub        func(*cloudwatch.ListMetricsInput) (*cloudwatch.ListMetricsOutput, error)
	listMetricsMutex       sync.RWMutex
	listMetricsArgsForCall []struct {
		arg1 *cloudwatch.ListMetricsInput
	}
	listMetricsReturns struct {
		result1 *cloudwatch.ListMetricsOutput
		result2 error
	}
	listMetricsReturnsOnCall map[int]struct {
		result1 *cloudwatch.ListMetricsOutput
		result2 error
	}
	ListMetricsPagesStub        func(*cloudwatch.ListMetricsInput, func(*cloudwatch.ListMetricsOutput, bool) bool) error
	listMetricsPagesMutex       sync.RWMutex
	listMetricsPagesArgsForCall []struct {
		arg1 *cloudwatch.ListMetricsInput
		arg2 func(*cloudwatch.ListMetricsOutput, bool) bool
	}
	listMetricsPagesReturns struct {
		result1 error
	}
	listMetricsPagesReturnsOnCall map[int]struct {
		result1 error
	}
	ListMetricsPagesWithContextStub        func(context.Context, *cloudwatch.ListMetricsInput, func(*cloudwatch.ListMetricsOutput, bool) bool, ...request.Option) error
	listMetricsPagesWithContextMutex       sync.RWMutex
	listMetricsPagesWithContextArgsForCall []struct {
		arg1 context.Context
		arg2 *cloudwatch.ListMetricsInput
		arg3 func(*cloudwatch.ListMetricsOutput, bool) bool
		arg4 []request.Option
	}
	listMetricsPagesWithContextReturns struct {
		result1 error
	}
	listMetricsPagesWithContextReturnsOnCall map[int]struct {
		result1 error
	}
	ListMetricsRequestStub        func(*cloudwatch.ListMetricsInput) (*request.Request, *cloudwatch.ListMetricsOutput)
	listMetricsRequestMutex       sync.RWMutex
	listMetricsRequestArgsForCall []struct {
		arg1 *cloudwatch.ListMetricsInput
	}
	listMetricsRequestReturns struct {
		result1 *request.Request
		result2 *cloudwatch.ListMetricsOutput
	}
	listMetricsRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *cloudwatch.ListMetricsOutput
	}
	ListMetricsWithContextStub        func(context.Context, *cloudwatch.ListMetricsInput, ...request.Option) (*cloudwatch.ListMetricsOutput, error)
	listMetricsWithContextMutex       sync.RWMutex
	listMetricsWithContextArgsForCall []struct {
		arg1 context.Context
		arg2 *cloudwatch.ListMetricsInput
		arg3 []request.Option
	}
	listMetricsWithContextReturns struct {
		result1 *cloudwatch.ListMetricsOutput
		result2 error
	}
	listMetricsWithContextReturnsOnCall map[int]struct {
		result1 *cloudwatch.ListMetricsOutput
		result2 error
	}
	PutDashboardStub        func(*cloudwatch.PutDashboardInput) (*cloudwatch.PutDashboardOutput, error)
	putDashboardMutex       sync.RWMutex
	putDashboardArgsForCall []struct {
		arg1 *cloudwatch.PutDashboardInput
	}
	putDashboardReturns struct {
		result1 *cloudwatch.PutDashboardOutput
		result2 error
	}
	putDashboardReturnsOnCall map[int]struct {
		result1 *cloudwatch.PutDashboardOutput
		result2 error
	}
	PutDashboardRequestStub        func(*cloudwatch.PutDashboardInput) (*request.Request, *cloudwatch.PutDashboardOutput)
	putDashboardRequestMutex       sync.RWMutex
	putDashboardRequestArgsForCall []struct {
		arg1 *cloudwatch.PutDashboardInput
	}
	putDashboardRequestReturns struct {
		result1 *request.Request
		result2 *cloudwatch.PutDashboardOutput
	}
	putDashboardRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *cloudwatch.PutDashboardOutput
	}
	PutDashboardWithContextStub        func(context.Context, *cloudwatch.PutDashboardInput, ...request.Option) (*cloudwatch.PutDashboardOutput, error)
	putDashboardWithContextMutex       sync.RWMutex
	putDashboardWithContextArgsForCall []struct {
		arg1 context.Context
		arg2 *cloudwatch.PutDashboardInput
		arg3 []request.Option
	}
	putDashboardWithContextReturns struct {
		result1 *cloudwatch.PutDashboardOutput
		result2 error
	}
	putDashboardWithContextReturnsOnCall map[int]struct {
		result1 *cloudwatch.PutDashboardOutput
		result2 error
	}
	PutMetricAlarmStub        func(*cloudwatch.PutMetricAlarmInput) (*cloudwatch.PutMetricAlarmOutput, error)
	putMetricAlarmMutex       sync.RWMutex
	putMetricAlarmArgsForCall []struct {
		arg1 *cloudwatch.PutMetricAlarmInput
	}
	putMetricAlarmReturns struct {
		result1 *cloudwatch.PutMetricAlarmOutput
		result2 error
	}
	putMetricAlarmReturnsOnCall map[int]struct {
		result1 *cloudwatch.PutMetricAlarmOutput
		result2 error
	}
	PutMetricAlarmRequestStub        func(*cloudwatch.PutMetricAlarmInput) (*request.Request, *cloudwatch.PutMetricAlarmOutput)
	putMetricAlarmRequestMutex       sync.RWMutex
	putMetricAlarmRequestArgsForCall []struct {
		arg1 *cloudwatch.PutMetricAlarmInput
	}
	putMetricAlarmRequestReturns struct {
		result1 *request.Request
		result2 *cloudwatch.PutMetricAlarmOutput
	}
	putMetricAlarmRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *cloudwatch.PutMetricAlarmOutput
	}
	PutMetricAlarmWithContextStub        func(context.Context, *cloudwatch.PutMetricAlarmInput, ...request.Option) (*cloudwatch.PutMetricAlarmOutput, error)
	putMetricAlarmWithContextMutex       sync.RWMutex
	putMetricAlarmWithContextArgsForCall []struct {
		arg1 context.Context
		arg2 *cloudwatch.PutMetricAlarmInput
		arg3 []request.Option
	}
	putMetricAlarmWithContextReturns struct {
		result1 *cloudwatch.PutMetricAlarmOutput
		result2 error
	}
	putMetricAlarmWithContextReturnsOnCall map[int]struct {
		result1 *cloudwatch.PutMetricAlarmOutput
		result2 error
	}
	PutMetricDataStub        func(*cloudwatch.PutMetricDataInput) (*cloudwatch.PutMetricDataOutput, error)
	putMetricDataMutex       sync.RWMutex
	putMetricDataArgsForCall []struct {
		arg1 *cloudwatch.PutMetricDataInput
	}
	putMetricDataReturns struct {
		result1 *cloudwatch.PutMetricDataOutput
		result2 error
	}
	putMetricDataReturnsOnCall map[int]struct {
		result1 *cloudwatch.PutMetricDataOutput
		result2 error
	}
	PutMetricDataRequestStub        func(*cloudwatch.PutMetricDataInput) (*request.Request, *cloudwatch.PutMetricDataOutput)
	putMetricDataRequestMutex       sync.RWMutex
	putMetricDataRequestArgsForCall []struct {
		arg1 *cloudwatch.PutMetricDataInput
	}
	putMetricDataRequestReturns struct {
		result1 *request.Request
		result2 *cloudwatch.PutMetricDataOutput
	}
	putMetricDataRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *cloudwatch.PutMetricDataOutput
	}
	PutMetricDataWithContextStub        func(context.Context, *cloudwatch.PutMetricDataInput, ...request.Option) (*cloudwatch.PutMetricDataOutput, error)
	putMetricDataWithContextMutex       sync.RWMutex
	putMetricDataWithContextArgsForCall []struct {
		arg1 context.Context
		arg2 *cloudwatch.PutMetricDataInput
		arg3 []request.Option
	}
	putMetricDataWithContextReturns struct {
		result1 *cloudwatch.PutMetricDataOutput
		result2 error
	}
	putMetricDataWithContextReturnsOnCall map[int]struct {
		result1 *cloudwatch.PutMetricDataOutput
		result2 error
	}
	SetAlarmStateStub        func(*cloudwatch.SetAlarmStateInput) (*cloudwatch.SetAlarmStateOutput, error)
	setAlarmStateMutex       sync.RWMutex
	setAlarmStateArgsForCall []struct {
		arg1 *cloudwatch.SetAlarmStateInput
	}
	setAlarmStateReturns struct {
		result1 *cloudwatch.SetAlarmStateOutput
		result2 error
	}
	setAlarmStateReturnsOnCall map[int]struct {
		result1 *cloudwatch.SetAlarmStateOutput
		result2 error
	}
	SetAlarmStateRequestStub        func(*cloudwatch.SetAlarmStateInput) (*request.Request, *cloudwatch.SetAlarmStateOutput)
	setAlarmStateRequestMutex       sync.RWMutex
	setAlarmStateRequestArgsForCall []struct {
		arg1 *cloudwatch.SetAlarmStateInput
	}
	setAlarmStateRequestReturns struct {
		result1 *request.Request
		result2 *cloudwatch.SetAlarmStateOutput
	}
	setAlarmStateRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *cloudwatch.SetAlarmStateOutput
	}
	SetAlarmStateWithContextStub        func(context.Context, *cloudwatch.SetAlarmStateInput, ...request.Option) (*cloudwatch.SetAlarmStateOutput, error)
	setAlarmStateWithContextMutex       sync.RWMutex
	setAlarmStateWithContextArgsForCall []struct {
		arg1 context.Context
		arg2 *cloudwatch.SetAlarmStateInput
		arg3 []request.Option
	}
	setAlarmStateWithContextReturns struct {
		result1 *cloudwatch.SetAlarmStateOutput
		result2 error
	}
	setAlarmStateWithContextReturnsOnCall map[int]struct {
		result1 *cloudwatch.SetAlarmStateOutput
		result2 error
	}
	WaitUntilAlarmExistsStub        func(*cloudwatch.DescribeAlarmsInput) error
	waitUntilAlarmExistsMutex       sync.RWMutex
	waitUntilAlarmExistsArgsForCall []struct {
		arg1 *cloudwatch.DescribeAlarmsInput
	}
	waitUntilAlarmExistsReturns struct {
		result1 error
	}
	waitUntilAlarmExistsReturnsOnCall map[int]struct {
		result1 error
	}
	WaitUntilAlarmExistsWithContextStub        func(context.Context, *cloudwatch.DescribeAlarmsInput, ...request.WaiterOption) error
	waitUntilAlarmExistsWithContextMutex       sync.RWMutex
	waitUntilAlarmExistsWithContextArgsForCall []struct {
		arg1 context.Context
		arg2 *cloudwatch.DescribeAlarmsInput
		arg3 []request.WaiterOption
	}
	waitUntilAlarmExistsWithContextReturns struct {
		result1 error
	}
	waitUntilAlarmExistsWithContextReturnsOnCall map[int]struct {
		result1 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeCloudWatchAPI) DeleteAlarms(arg1 *cloudwatch.DeleteAlarmsInput) (*cloudwatch.DeleteAlarmsOutput, error) {
	fake.deleteAlarmsMutex.Lock()
	ret, specificReturn := fake.deleteAlarmsReturnsOnCall[len(fake.deleteAlarmsArgsForCall)]
	fake.deleteAlarmsArgsForCall = append(fake.deleteAlarmsArgsForCall, struct {
		arg1 *cloudwatch.DeleteAlarmsInput
	}{arg1})
	fake.recordInvocation("DeleteAlarms", []interface{}{arg1})
	fake.deleteAlarmsMutex.Unlock()
	if fake.DeleteAlarmsStub != nil {
		return fake.DeleteAlarmsStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.deleteAlarmsReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeCloudWatchAPI) DeleteAlarmsCallCount() int {
	fake.deleteAlarmsMutex.RLock()
	defer fake.deleteAlarmsMutex.RUnlock()
	return len(fake.deleteAlarmsArgsForCall)
}

func (fake *FakeCloudWatchAPI) DeleteAlarmsCalls(stub func(*cloudwatch.DeleteAlarmsInput) (*cloudwatch.DeleteAlarmsOutput, error)) {
	fake.deleteAlarmsMutex.Lock()
	defer fake.deleteAlarmsMutex.Unlock()
	fake.DeleteAlarmsStub = stub
}

func (fake *FakeCloudWatchAPI) DeleteAlarmsArgsForCall(i int) *cloudwatch.DeleteAlarmsInput {
	fake.deleteAlarmsMutex.RLock()
	defer fake.deleteAlarmsMutex.RUnlock()
	argsForCall := fake.deleteAlarmsArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeCloudWatchAPI) DeleteAlarmsReturns(result1 *cloudwatch.DeleteAlarmsOutput, result2 error) {
	fake.deleteAlarmsMutex.Lock()
	defer fake.deleteAlarmsMutex.Unlock()
	fake.DeleteAlarmsStub = nil
	fake.deleteAlarmsReturns = struct {
		result1 *cloudwatch.DeleteAlarmsOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeCloudWatchAPI) DeleteAlarmsReturnsOnCall(i int, result1 *cloudwatch.DeleteAlarmsOutput, result2 error) {
	fake.deleteAlarmsMutex.Lock()
	defer fake.deleteAlarmsMutex.Unlock()
	fake.DeleteAlarmsStub = nil
	if fake.deleteAlarmsReturnsOnCall == nil {
		fake.deleteAlarmsReturnsOnCall = make(map[int]struct {
			result1 *cloudwatch.DeleteAlarmsOutput
			result2 error
		})
	}
	fake.deleteAlarmsReturnsOnCall[i] = struct {
		result1 *cloudwatch.DeleteAlarmsOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeCloudWatchAPI) DeleteAlarmsRequest(arg1 *cloudwatch.DeleteAlarmsInput) (*request.Request, *cloudwatch.DeleteAlarmsOutput) {
	fake.deleteAlarmsRequestMutex.Lock()
	ret, specificReturn := fake.deleteAlarmsRequestReturnsOnCall[len(fake.deleteAlarmsRequestArgsForCall)]
	fake.deleteAlarmsRequestArgsForCall = append(fake.deleteAlarmsRequestArgsForCall, struct {
		arg1 *cloudwatch.DeleteAlarmsInput
	}{arg1})
	fake.recordInvocation("DeleteAlarmsRequest", []interface{}{arg1})
	fake.deleteAlarmsRequestMutex.Unlock()
	if fake.DeleteAlarmsRequestStub != nil {
		return fake.DeleteAlarmsRequestStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.deleteAlarmsRequestReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeCloudWatchAPI) DeleteAlarmsRequestCallCount() int {
	fake.deleteAlarmsRequestMutex.RLock()
	defer fake.deleteAlarmsRequestMutex.RUnlock()
	return len(fake.deleteAlarmsRequestArgsForCall)
}

func (fake *FakeCloudWatchAPI) DeleteAlarmsRequestCalls(stub func(*cloudwatch.DeleteAlarmsInput) (*request.Request, *cloudwatch.DeleteAlarmsOutput)) {
	fake.deleteAlarmsRequestMutex.Lock()
	defer fake.deleteAlarmsRequestMutex.Unlock()
	fake.DeleteAlarmsRequestStub = stub
}

func (fake *FakeCloudWatchAPI) DeleteAlarmsRequestArgsForCall(i int) *cloudwatch.DeleteAlarmsInput {
	fake.deleteAlarmsRequestMutex.RLock()
	defer fake.deleteAlarmsRequestMutex.RUnlock()
	argsForCall := fake.deleteAlarmsRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeCloudWatchAPI) DeleteAlarmsRequestReturns(result1 *request.Request, result2 *cloudwatch.DeleteAlarmsOutput) {
	fake.deleteAlarmsRequestMutex.Lock()
	defer fake.deleteAlarmsRequestMutex.Unlock()
	fake.DeleteAlarmsRequestStub = nil
	fake.deleteAlarmsRequestReturns = struct {
		result1 *request.Request
		result2 *cloudwatch.DeleteAlarmsOutput
	}{result1, result2}
}

func (fake *FakeCloudWatchAPI) DeleteAlarmsRequestReturnsOnCall(i int, result1 *request.Request, result2 *cloudwatch.DeleteAlarmsOutput) {
	fake.deleteAlarmsRequestMutex.Lock()
	defer fake.deleteAlarmsRequestMutex.Unlock()
	fake.DeleteAlarmsRequestStub = nil
	if fake.deleteAlarmsRequestReturnsOnCall == nil {
		fake.deleteAlarmsRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *cloudwatch.DeleteAlarmsOutput
		})
	}
	fake.deleteAlarmsRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *cloudwatch.DeleteAlarmsOutput
	}{result1, result2}
}

func (fake *FakeCloudWatchAPI) DeleteAlarmsWithContext(arg1 context.Context, arg2 *cloudwatch.DeleteAlarmsInput, arg3 ...request.Option) (*cloudwatch.DeleteAlarmsOutput, error) {
	fake.deleteAlarmsWithContextMutex.Lock()
	ret, specificReturn := fake.deleteAlarmsWithContextReturnsOnCall[len(fake.deleteAlarmsWithContextArgsForCall)]
	fake.deleteAlarmsWithContextArgsForCall = append(fake.deleteAlarmsWithContextArgsForCall, struct {
		arg1 context.Context
		arg2 *cloudwatch.DeleteAlarmsInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	fake.recordInvocation("DeleteAlarmsWithContext", []interface{}{arg1, arg2, arg3})
	fake.deleteAlarmsWithContextMutex.Unlock()
	if fake.DeleteAlarmsWithContextStub != nil {
		return fake.DeleteAlarmsWithContextStub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.deleteAlarmsWithContextReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeCloudWatchAPI) DeleteAlarmsWithContextCallCount() int {
	fake.deleteAlarmsWithContextMutex.RLock()
	defer fake.deleteAlarmsWithContextMutex.RUnlock()
	return len(fake.deleteAlarmsWithContextArgsForCall)
}

func (fake *FakeCloudWatchAPI) DeleteAlarmsWithContextCalls(stub func(context.Context, *cloudwatch.DeleteAlarmsInput, ...request.Option) (*cloudwatch.DeleteAlarmsOutput, error)) {
	fake.deleteAlarmsWithContextMutex.Lock()
	defer fake.deleteAlarmsWithContextMutex.Unlock()
	fake.DeleteAlarmsWithContextStub = stub
}

func (fake *FakeCloudWatchAPI) DeleteAlarmsWithContextArgsForCall(i int) (context.Context, *cloudwatch.DeleteAlarmsInput, []request.Option) {
	fake.deleteAlarmsWithContextMutex.RLock()
	defer fake.deleteAlarmsWithContextMutex.RUnlock()
	argsForCall := fake.deleteAlarmsWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeCloudWatchAPI) DeleteAlarmsWithContextReturns(result1 *cloudwatch.DeleteAlarmsOutput, result2 error) {
	fake.deleteAlarmsWithContextMutex.Lock()
	defer fake.deleteAlarmsWithContextMutex.Unlock()
	fake.DeleteAlarmsWithContextStub = nil
	fake.deleteAlarmsWithContextReturns = struct {
		result1 *cloudwatch.DeleteAlarmsOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeCloudWatchAPI) DeleteAlarmsWithContextReturnsOnCall(i int, result1 *cloudwatch.DeleteAlarmsOutput, result2 error) {
	fake.deleteAlarmsWithContextMutex.Lock()
	defer fake.deleteAlarmsWithContextMutex.Unlock()
	fake.DeleteAlarmsWithContextStub = nil
	if fake.deleteAlarmsWithContextReturnsOnCall == nil {
		fake.deleteAlarmsWithContextReturnsOnCall = make(map[int]struct {
			result1 *cloudwatch.DeleteAlarmsOutput
			result2 error
		})
	}
	fake.deleteAlarmsWithContextReturnsOnCall[i] = struct {
		result1 *cloudwatch.DeleteAlarmsOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeCloudWatchAPI) DeleteDashboards(arg1 *cloudwatch.DeleteDashboardsInput) (*cloudwatch.DeleteDashboardsOutput, error) {
	fake.deleteDashboardsMutex.Lock()
	ret, specificReturn := fake.deleteDashboardsReturnsOnCall[len(fake.deleteDashboardsArgsForCall)]
	fake.deleteDashboardsArgsForCall = append(fake.deleteDashboardsArgsForCall, struct {
		arg1 *cloudwatch.DeleteDashboardsInput
	}{arg1})
	fake.recordInvocation("DeleteDashboards", []interface{}{arg1})
	fake.deleteDashboardsMutex.Unlock()
	if fake.DeleteDashboardsStub != nil {
		return fake.DeleteDashboardsStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.deleteDashboardsReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeCloudWatchAPI) DeleteDashboardsCallCount() int {
	fake.deleteDashboardsMutex.RLock()
	defer fake.deleteDashboardsMutex.RUnlock()
	return len(fake.deleteDashboardsArgsForCall)
}

func (fake *FakeCloudWatchAPI) DeleteDashboardsCalls(stub func(*cloudwatch.DeleteDashboardsInput) (*cloudwatch.DeleteDashboardsOutput, error)) {
	fake.deleteDashboardsMutex.Lock()
	defer fake.deleteDashboardsMutex.Unlock()
	fake.DeleteDashboardsStub = stub
}

func (fake *FakeCloudWatchAPI) DeleteDashboardsArgsForCall(i int) *cloudwatch.DeleteDashboardsInput {
	fake.deleteDashboardsMutex.RLock()
	defer fake.deleteDashboardsMutex.RUnlock()
	argsForCall := fake.deleteDashboardsArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeCloudWatchAPI) DeleteDashboardsReturns(result1 *cloudwatch.DeleteDashboardsOutput, result2 error) {
	fake.deleteDashboardsMutex.Lock()
	defer fake.deleteDashboardsMutex.Unlock()
	fake.DeleteDashboardsStub = nil
	fake.deleteDashboardsReturns = struct {
		result1 *cloudwatch.DeleteDashboardsOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeCloudWatchAPI) DeleteDashboardsReturnsOnCall(i int, result1 *cloudwatch.DeleteDashboardsOutput, result2 error) {
	fake.deleteDashboardsMutex.Lock()
	defer fake.deleteDashboardsMutex.Unlock()
	fake.DeleteDashboardsStub = nil
	if fake.deleteDashboardsReturnsOnCall == nil {
		fake.deleteDashboardsReturnsOnCall = make(map[int]struct {
			result1 *cloudwatch.DeleteDashboardsOutput
			result2 error
		})
	}
	fake.deleteDashboardsReturnsOnCall[i] = struct {
		result1 *cloudwatch.DeleteDashboardsOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeCloudWatchAPI) DeleteDashboardsRequest(arg1 *cloudwatch.DeleteDashboardsInput) (*request.Request, *cloudwatch.DeleteDashboardsOutput) {
	fake.deleteDashboardsRequestMutex.Lock()
	ret, specificReturn := fake.deleteDashboardsRequestReturnsOnCall[len(fake.deleteDashboardsRequestArgsForCall)]
	fake.deleteDashboardsRequestArgsForCall = append(fake.deleteDashboardsRequestArgsForCall, struct {
		arg1 *cloudwatch.DeleteDashboardsInput
	}{arg1})
	fake.recordInvocation("DeleteDashboardsRequest", []interface{}{arg1})
	fake.deleteDashboardsRequestMutex.Unlock()
	if fake.DeleteDashboardsRequestStub != nil {
		return fake.DeleteDashboardsRequestStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.deleteDashboardsRequestReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeCloudWatchAPI) DeleteDashboardsRequestCallCount() int {
	fake.deleteDashboardsRequestMutex.RLock()
	defer fake.deleteDashboardsRequestMutex.RUnlock()
	return len(fake.deleteDashboardsRequestArgsForCall)
}

func (fake *FakeCloudWatchAPI) DeleteDashboardsRequestCalls(stub func(*cloudwatch.DeleteDashboardsInput) (*request.Request, *cloudwatch.DeleteDashboardsOutput)) {
	fake.deleteDashboardsRequestMutex.Lock()
	defer fake.deleteDashboardsRequestMutex.Unlock()
	fake.DeleteDashboardsRequestStub = stub
}

func (fake *FakeCloudWatchAPI) DeleteDashboardsRequestArgsForCall(i int) *cloudwatch.DeleteDashboardsInput {
	fake.deleteDashboardsRequestMutex.RLock()
	defer fake.deleteDashboardsRequestMutex.RUnlock()
	argsForCall := fake.deleteDashboardsRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeCloudWatchAPI) DeleteDashboardsRequestReturns(result1 *request.Request, result2 *cloudwatch.DeleteDashboardsOutput) {
	fake.deleteDashboardsRequestMutex.Lock()
	defer fake.deleteDashboardsRequestMutex.Unlock()
	fake.DeleteDashboardsRequestStub = nil
	fake.deleteDashboardsRequestReturns = struct {
		result1 *request.Request
		result2 *cloudwatch.DeleteDashboardsOutput
	}{result1, result2}
}

func (fake *FakeCloudWatchAPI) DeleteDashboardsRequestReturnsOnCall(i int, result1 *request.Request, result2 *cloudwatch.DeleteDashboardsOutput) {
	fake.deleteDashboardsRequestMutex.Lock()
	defer fake.deleteDashboardsRequestMutex.Unlock()
	fake.DeleteDashboardsRequestStub = nil
	if fake.deleteDashboardsRequestReturnsOnCall == nil {
		fake.deleteDashboardsRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *cloudwatch.DeleteDashboardsOutput
		})
	}
	fake.deleteDashboardsRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *cloudwatch.DeleteDashboardsOutput
	}{result1, result2}
}

func (fake *FakeCloudWatchAPI) DeleteDashboardsWithContext(arg1 context.Context, arg2 *cloudwatch.DeleteDashboardsInput, arg3 ...request.Option) (*cloudwatch.DeleteDashboardsOutput, error) {
	fake.deleteDashboardsWithContextMutex.Lock()
	ret, specificReturn := fake.deleteDashboardsWithContextReturnsOnCall[len(fake.deleteDashboardsWithContextArgsForCall)]
	fake.deleteDashboardsWithContextArgsForCall = append(fake.deleteDashboardsWithContextArgsForCall, struct {
		arg1 context.Context
		arg2 *cloudwatch.DeleteDashboardsInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	fake.recordInvocation("DeleteDashboardsWithContext", []interface{}{arg1, arg2, arg3})
	fake.deleteDashboardsWithContextMutex.Unlock()
	if fake.DeleteDashboardsWithContextStub != nil {
		return fake.DeleteDashboardsWithContextStub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.deleteDashboardsWithContextReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeCloudWatchAPI) DeleteDashboardsWithContextCallCount() int {
	fake.deleteDashboardsWithContextMutex.RLock()
	defer fake.deleteDashboardsWithContextMutex.RUnlock()
	return len(fake.deleteDashboardsWithContextArgsForCall)
}

func (fake *FakeCloudWatchAPI) DeleteDashboardsWithContextCalls(stub func(context.Context, *cloudwatch.DeleteDashboardsInput, ...request.Option) (*cloudwatch.DeleteDashboardsOutput, error)) {
	fake.deleteDashboardsWithContextMutex.Lock()
	defer fake.deleteDashboardsWithContextMutex.Unlock()
	fake.DeleteDashboardsWithContextStub = stub
}

func (fake *FakeCloudWatchAPI) DeleteDashboardsWithContextArgsForCall(i int) (context.Context, *cloudwatch.DeleteDashboardsInput, []request.Option) {
	fake.deleteDashboardsWithContextMutex.RLock()
	defer fake.deleteDashboardsWithContextMutex.RUnlock()
	argsForCall := fake.deleteDashboardsWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeCloudWatchAPI) DeleteDashboardsWithContextReturns(result1 *cloudwatch.DeleteDashboardsOutput, result2 error) {
	fake.deleteDashboardsWithContextMutex.Lock()
	defer fake.deleteDashboardsWithContextMutex.Unlock()
	fake.DeleteDashboardsWithContextStub = nil
	fake.deleteDashboardsWithContextReturns = struct {
		result1 *cloudwatch.DeleteDashboardsOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeCloudWatchAPI) DeleteDashboardsWithContextReturnsOnCall(i int, result1 *cloudwatch.DeleteDashboardsOutput, result2 error) {
	fake.deleteDashboardsWithContextMutex.Lock()
	defer fake.deleteDashboardsWithContextMutex.Unlock()
	fake.DeleteDashboardsWithContextStub = nil
	if fake.deleteDashboardsWithContextReturnsOnCall == nil {
		fake.deleteDashboardsWithContextReturnsOnCall = make(map[int]struct {
			result1 *cloudwatch.DeleteDashboardsOutput
			result2 error
		})
	}
	fake.deleteDashboardsWithContextReturnsOnCall[i] = struct {
		result1 *cloudwatch.DeleteDashboardsOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeCloudWatchAPI) DescribeAlarmHistory(arg1 *cloudwatch.DescribeAlarmHistoryInput) (*cloudwatch.DescribeAlarmHistoryOutput, error) {
	fake.describeAlarmHistoryMutex.Lock()
	ret, specificReturn := fake.describeAlarmHistoryReturnsOnCall[len(fake.describeAlarmHistoryArgsForCall)]
	fake.describeAlarmHistoryArgsForCall = append(fake.describeAlarmHistoryArgsForCall, struct {
		arg1 *cloudwatch.DescribeAlarmHistoryInput
	}{arg1})
	fake.recordInvocation("DescribeAlarmHistory", []interface{}{arg1})
	fake.describeAlarmHistoryMutex.Unlock()
	if fake.DescribeAlarmHistoryStub != nil {
		return fake.DescribeAlarmHistoryStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.describeAlarmHistoryReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeCloudWatchAPI) DescribeAlarmHistoryCallCount() int {
	fake.describeAlarmHistoryMutex.RLock()
	defer fake.describeAlarmHistoryMutex.RUnlock()
	return len(fake.describeAlarmHistoryArgsForCall)
}

func (fake *FakeCloudWatchAPI) DescribeAlarmHistoryCalls(stub func(*cloudwatch.DescribeAlarmHistoryInput) (*cloudwatch.DescribeAlarmHistoryOutput, error)) {
	fake.describeAlarmHistoryMutex.Lock()
	defer fake.describeAlarmHistoryMutex.Unlock()
	fake.DescribeAlarmHistoryStub = stub
}

func (fake *FakeCloudWatchAPI) DescribeAlarmHistoryArgsForCall(i int) *cloudwatch.DescribeAlarmHistoryInput {
	fake.describeAlarmHistoryMutex.RLock()
	defer fake.describeAlarmHistoryMutex.RUnlock()
	argsForCall := fake.describeAlarmHistoryArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeCloudWatchAPI) DescribeAlarmHistoryReturns(result1 *cloudwatch.DescribeAlarmHistoryOutput, result2 error) {
	fake.describeAlarmHistoryMutex.Lock()
	defer fake.describeAlarmHistoryMutex.Unlock()
	fake.DescribeAlarmHistoryStub = nil
	fake.describeAlarmHistoryReturns = struct {
		result1 *cloudwatch.DescribeAlarmHistoryOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeCloudWatchAPI) DescribeAlarmHistoryReturnsOnCall(i int, result1 *cloudwatch.DescribeAlarmHistoryOutput, result2 error) {
	fake.describeAlarmHistoryMutex.Lock()
	defer fake.describeAlarmHistoryMutex.Unlock()
	fake.DescribeAlarmHistoryStub = nil
	if fake.describeAlarmHistoryReturnsOnCall == nil {
		fake.describeAlarmHistoryReturnsOnCall = make(map[int]struct {
			result1 *cloudwatch.DescribeAlarmHistoryOutput
			result2 error
		})
	}
	fake.describeAlarmHistoryReturnsOnCall[i] = struct {
		result1 *cloudwatch.DescribeAlarmHistoryOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeCloudWatchAPI) DescribeAlarmHistoryPages(arg1 *cloudwatch.DescribeAlarmHistoryInput, arg2 func(*cloudwatch.DescribeAlarmHistoryOutput, bool) bool) error {
	fake.describeAlarmHistoryPagesMutex.Lock()
	ret, specificReturn := fake.describeAlarmHistoryPagesReturnsOnCall[len(fake.describeAlarmHistoryPagesArgsForCall)]
	fake.describeAlarmHistoryPagesArgsForCall = append(fake.describeAlarmHistoryPagesArgsForCall, struct {
		arg1 *cloudwatch.DescribeAlarmHistoryInput
		arg2 func(*cloudwatch.DescribeAlarmHistoryOutput, bool) bool
	}{arg1, arg2})
	fake.recordInvocation("DescribeAlarmHistoryPages", []interface{}{arg1, arg2})
	fake.describeAlarmHistoryPagesMutex.Unlock()
	if fake.DescribeAlarmHistoryPagesStub != nil {
		return fake.DescribeAlarmHistoryPagesStub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.describeAlarmHistoryPagesReturns
	return fakeReturns.result1
}

func (fake *FakeCloudWatchAPI) DescribeAlarmHistoryPagesCallCount() int {
	fake.describeAlarmHistoryPagesMutex.RLock()
	defer fake.describeAlarmHistoryPagesMutex.RUnlock()
	return len(fake.describeAlarmHistoryPagesArgsForCall)
}

func (fake *FakeCloudWatchAPI) DescribeAlarmHistoryPagesCalls(stub func(*cloudwatch.DescribeAlarmHistoryInput, func(*cloudwatch.DescribeAlarmHistoryOutput, bool) bool) error) {
	fake.describeAlarmHistoryPagesMutex.Lock()
	defer fake.describeAlarmHistoryPagesMutex.Unlock()
	fake.DescribeAlarmHistoryPagesStub = stub
}

func (fake *FakeCloudWatchAPI) DescribeAlarmHistoryPagesArgsForCall(i int) (*cloudwatch.DescribeAlarmHistoryInput, func(*cloudwatch.DescribeAlarmHistoryOutput, bool) bool) {
	fake.describeAlarmHistoryPagesMutex.RLock()
	defer fake.describeAlarmHistoryPagesMutex.RUnlock()
	argsForCall := fake.describeAlarmHistoryPagesArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeCloudWatchAPI) DescribeAlarmHistoryPagesReturns(result1 error) {
	fake.describeAlarmHistoryPagesMutex.Lock()
	defer fake.describeAlarmHistoryPagesMutex.Unlock()
	fake.DescribeAlarmHistoryPagesStub = nil
	fake.describeAlarmHistoryPagesReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeCloudWatchAPI) DescribeAlarmHistoryPagesReturnsOnCall(i int, result1 error) {
	fake.describeAlarmHistoryPagesMutex.Lock()
	defer fake.describeAlarmHistoryPagesMutex.Unlock()
	fake.DescribeAlarmHistoryPagesStub = nil
	if fake.describeAlarmHistoryPagesReturnsOnCall == nil {
		fake.describeAlarmHistoryPagesReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.describeAlarmHistoryPagesReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeCloudWatchAPI) DescribeAlarmHistoryPagesWithContext(arg1 context.Context, arg2 *cloudwatch.DescribeAlarmHistoryInput, arg3 func(*cloudwatch.DescribeAlarmHistoryOutput, bool) bool, arg4 ...request.Option) error {
	fake.describeAlarmHistoryPagesWithContextMutex.Lock()
	ret, specificReturn := fake.describeAlarmHistoryPagesWithContextReturnsOnCall[len(fake.describeAlarmHistoryPagesWithContextArgsForCall)]
	fake.describeAlarmHistoryPagesWithContextArgsForCall = append(fake.describeAlarmHistoryPagesWithContextArgsForCall, struct {
		arg1 context.Context
		arg2 *cloudwatch.DescribeAlarmHistoryInput
		arg3 func(*cloudwatch.DescribeAlarmHistoryOutput, bool) bool
		arg4 []request.Option
	}{arg1, arg2, arg3, arg4})
	fake.recordInvocation("DescribeAlarmHistoryPagesWithContext", []interface{}{arg1, arg2, arg3, arg4})
	fake.describeAlarmHistoryPagesWithContextMutex.Unlock()
	if fake.DescribeAlarmHistoryPagesWithContextStub != nil {
		return fake.DescribeAlarmHistoryPagesWithContextStub(arg1, arg2, arg3, arg4...)
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.describeAlarmHistoryPagesWithContextReturns
	return fakeReturns.result1
}

func (fake *FakeCloudWatchAPI) DescribeAlarmHistoryPagesWithContextCallCount() int {
	fake.describeAlarmHistoryPagesWithContextMutex.RLock()
	defer fake.describeAlarmHistoryPagesWithContextMutex.RUnlock()
	return len(fake.describeAlarmHistoryPagesWithContextArgsForCall)
}

func (fake *FakeCloudWatchAPI) DescribeAlarmHistoryPagesWithContextCalls(stub func(context.Context, *cloudwatch.DescribeAlarmHistoryInput, func(*cloudwatch.DescribeAlarmHistoryOutput, bool) bool, ...request.Option) error) {
	fake.describeAlarmHistoryPagesWithContextMutex.Lock()
	defer fake.describeAlarmHistoryPagesWithContextMutex.Unlock()
	fake.DescribeAlarmHistoryPagesWithContextStub = stub
}

func (fake *FakeCloudWatchAPI) DescribeAlarmHistoryPagesWithContextArgsForCall(i int) (context.Context, *cloudwatch.DescribeAlarmHistoryInput, func(*cloudwatch.DescribeAlarmHistoryOutput, bool) bool, []request.Option) {
	fake.describeAlarmHistoryPagesWithContextMutex.RLock()
	defer fake.describeAlarmHistoryPagesWithContextMutex.RUnlock()
	argsForCall := fake.describeAlarmHistoryPagesWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3, argsForCall.arg4
}

func (fake *FakeCloudWatchAPI) DescribeAlarmHistoryPagesWithContextReturns(result1 error) {
	fake.describeAlarmHistoryPagesWithContextMutex.Lock()
	defer fake.describeAlarmHistoryPagesWithContextMutex.Unlock()
	fake.DescribeAlarmHistoryPagesWithContextStub = nil
	fake.describeAlarmHistoryPagesWithContextReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeCloudWatchAPI) DescribeAlarmHistoryPagesWithContextReturnsOnCall(i int, result1 error) {
	fake.describeAlarmHistoryPagesWithContextMutex.Lock()
	defer fake.describeAlarmHistoryPagesWithContextMutex.Unlock()
	fake.DescribeAlarmHistoryPagesWithContextStub = nil
	if fake.describeAlarmHistoryPagesWithContextReturnsOnCall == nil {
		fake.describeAlarmHistoryPagesWithContextReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.describeAlarmHistoryPagesWithContextReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeCloudWatchAPI) DescribeAlarmHistoryRequest(arg1 *cloudwatch.DescribeAlarmHistoryInput) (*request.Request, *cloudwatch.DescribeAlarmHistoryOutput) {
	fake.describeAlarmHistoryRequestMutex.Lock()
	ret, specificReturn := fake.describeAlarmHistoryRequestReturnsOnCall[len(fake.describeAlarmHistoryRequestArgsForCall)]
	fake.describeAlarmHistoryRequestArgsForCall = append(fake.describeAlarmHistoryRequestArgsForCall, struct {
		arg1 *cloudwatch.DescribeAlarmHistoryInput
	}{arg1})
	fake.recordInvocation("DescribeAlarmHistoryRequest", []interface{}{arg1})
	fake.describeAlarmHistoryRequestMutex.Unlock()
	if fake.DescribeAlarmHistoryRequestStub != nil {
		return fake.DescribeAlarmHistoryRequestStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.describeAlarmHistoryRequestReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeCloudWatchAPI) DescribeAlarmHistoryRequestCallCount() int {
	fake.describeAlarmHistoryRequestMutex.RLock()
	defer fake.describeAlarmHistoryRequestMutex.RUnlock()
	return len(fake.describeAlarmHistoryRequestArgsForCall)
}

func (fake *FakeCloudWatchAPI) DescribeAlarmHistoryRequestCalls(stub func(*cloudwatch.DescribeAlarmHistoryInput) (*request.Request, *cloudwatch.DescribeAlarmHistoryOutput)) {
	fake.describeAlarmHistoryRequestMutex.Lock()
	defer fake.describeAlarmHistoryRequestMutex.Unlock()
	fake.DescribeAlarmHistoryRequestStub = stub
}

func (fake *FakeCloudWatchAPI) DescribeAlarmHistoryRequestArgsForCall(i int) *cloudwatch.DescribeAlarmHistoryInput {
	fake.describeAlarmHistoryRequestMutex.RLock()
	defer fake.describeAlarmHistoryRequestMutex.RUnlock()
	argsForCall := fake.describeAlarmHistoryRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeCloudWatchAPI) DescribeAlarmHistoryRequestReturns(result1 *request.Request, result2 *cloudwatch.DescribeAlarmHistoryOutput) {
	fake.describeAlarmHistoryRequestMutex.Lock()
	defer fake.describeAlarmHistoryRequestMutex.Unlock()
	fake.DescribeAlarmHistoryRequestStub = nil
	fake.describeAlarmHistoryRequestReturns = struct {
		result1 *request.Request
		result2 *cloudwatch.DescribeAlarmHistoryOutput
	}{result1, result2}
}

func (fake *FakeCloudWatchAPI) DescribeAlarmHistoryRequestReturnsOnCall(i int, result1 *request.Request, result2 *cloudwatch.DescribeAlarmHistoryOutput) {
	fake.describeAlarmHistoryRequestMutex.Lock()
	defer fake.describeAlarmHistoryRequestMutex.Unlock()
	fake.DescribeAlarmHistoryRequestStub = nil
	if fake.describeAlarmHistoryRequestReturnsOnCall == nil {
		fake.describeAlarmHistoryRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *cloudwatch.DescribeAlarmHistoryOutput
		})
	}
	fake.describeAlarmHistoryRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *cloudwatch.DescribeAlarmHistoryOutput
	}{result1, result2}
}

func (fake *FakeCloudWatchAPI) DescribeAlarmHistoryWithContext(arg1 context.Context, arg2 *cloudwatch.DescribeAlarmHistoryInput, arg3 ...request.Option) (*cloudwatch.DescribeAlarmHistoryOutput, error) {
	fake.describeAlarmHistoryWithContextMutex.Lock()
	ret, specificReturn := fake.describeAlarmHistoryWithContextReturnsOnCall[len(fake.describeAlarmHistoryWithContextArgsForCall)]
	fake.describeAlarmHistoryWithContextArgsForCall = append(fake.describeAlarmHistoryWithContextArgsForCall, struct {
		arg1 context.Context
		arg2 *cloudwatch.DescribeAlarmHistoryInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	fake.recordInvocation("DescribeAlarmHistoryWithContext", []interface{}{arg1, arg2, arg3})
	fake.describeAlarmHistoryWithContextMutex.Unlock()
	if fake.DescribeAlarmHistoryWithContextStub != nil {
		return fake.DescribeAlarmHistoryWithContextStub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.describeAlarmHistoryWithContextReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeCloudWatchAPI) DescribeAlarmHistoryWithContextCallCount() int {
	fake.describeAlarmHistoryWithContextMutex.RLock()
	defer fake.describeAlarmHistoryWithContextMutex.RUnlock()
	return len(fake.describeAlarmHistoryWithContextArgsForCall)
}

func (fake *FakeCloudWatchAPI) DescribeAlarmHistoryWithContextCalls(stub func(context.Context, *cloudwatch.DescribeAlarmHistoryInput, ...request.Option) (*cloudwatch.DescribeAlarmHistoryOutput, error)) {
	fake.describeAlarmHistoryWithContextMutex.Lock()
	defer fake.describeAlarmHistoryWithContextMutex.Unlock()
	fake.DescribeAlarmHistoryWithContextStub = stub
}

func (fake *FakeCloudWatchAPI) DescribeAlarmHistoryWithContextArgsForCall(i int) (context.Context, *cloudwatch.DescribeAlarmHistoryInput, []request.Option) {
	fake.describeAlarmHistoryWithContextMutex.RLock()
	defer fake.describeAlarmHistoryWithContextMutex.RUnlock()
	argsForCall := fake.describeAlarmHistoryWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeCloudWatchAPI) DescribeAlarmHistoryWithContextReturns(result1 *cloudwatch.DescribeAlarmHistoryOutput, result2 error) {
	fake.describeAlarmHistoryWithContextMutex.Lock()
	defer fake.describeAlarmHistoryWithContextMutex.Unlock()
	fake.DescribeAlarmHistoryWithContextStub = nil
	fake.describeAlarmHistoryWithContextReturns = struct {
		result1 *cloudwatch.DescribeAlarmHistoryOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeCloudWatchAPI) DescribeAlarmHistoryWithContextReturnsOnCall(i int, result1 *cloudwatch.DescribeAlarmHistoryOutput, result2 error) {
	fake.describeAlarmHistoryWithContextMutex.Lock()
	defer fake.describeAlarmHistoryWithContextMutex.Unlock()
	fake.DescribeAlarmHistoryWithContextStub = nil
	if fake.describeAlarmHistoryWithContextReturnsOnCall == nil {
		fake.describeAlarmHistoryWithContextReturnsOnCall = make(map[int]struct {
			result1 *cloudwatch.DescribeAlarmHistoryOutput
			result2 error
		})
	}
	fake.describeAlarmHistoryWithContextReturnsOnCall[i] = struct {
		result1 *cloudwatch.DescribeAlarmHistoryOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeCloudWatchAPI) DescribeAlarms(arg1 *cloudwatch.DescribeAlarmsInput) (*cloudwatch.DescribeAlarmsOutput, error) {
	fake.describeAlarmsMutex.Lock()
	ret, specificReturn := fake.describeAlarmsReturnsOnCall[len(fake.describeAlarmsArgsForCall)]
	fake.describeAlarmsArgsForCall = append(fake.describeAlarmsArgsForCall, struct {
		arg1 *cloudwatch.DescribeAlarmsInput
	}{arg1})
	fake.recordInvocation("DescribeAlarms", []interface{}{arg1})
	fake.describeAlarmsMutex.Unlock()
	if fake.DescribeAlarmsStub != nil {
		return fake.DescribeAlarmsStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.describeAlarmsReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeCloudWatchAPI) DescribeAlarmsCallCount() int {
	fake.describeAlarmsMutex.RLock()
	defer fake.describeAlarmsMutex.RUnlock()
	return len(fake.describeAlarmsArgsForCall)
}

func (fake *FakeCloudWatchAPI) DescribeAlarmsCalls(stub func(*cloudwatch.DescribeAlarmsInput) (*cloudwatch.DescribeAlarmsOutput, error)) {
	fake.describeAlarmsMutex.Lock()
	defer fake.describeAlarmsMutex.Unlock()
	fake.DescribeAlarmsStub = stub
}

func (fake *FakeCloudWatchAPI) DescribeAlarmsArgsForCall(i int) *cloudwatch.DescribeAlarmsInput {
	fake.describeAlarmsMutex.RLock()
	defer fake.describeAlarmsMutex.RUnlock()
	argsForCall := fake.describeAlarmsArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeCloudWatchAPI) DescribeAlarmsReturns(result1 *cloudwatch.DescribeAlarmsOutput, result2 error) {
	fake.describeAlarmsMutex.Lock()
	defer fake.describeAlarmsMutex.Unlock()
	fake.DescribeAlarmsStub = nil
	fake.describeAlarmsReturns = struct {
		result1 *cloudwatch.DescribeAlarmsOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeCloudWatchAPI) DescribeAlarmsReturnsOnCall(i int, result1 *cloudwatch.DescribeAlarmsOutput, result2 error) {
	fake.describeAlarmsMutex.Lock()
	defer fake.describeAlarmsMutex.Unlock()
	fake.DescribeAlarmsStub = nil
	if fake.describeAlarmsReturnsOnCall == nil {
		fake.describeAlarmsReturnsOnCall = make(map[int]struct {
			result1 *cloudwatch.DescribeAlarmsOutput
			result2 error
		})
	}
	fake.describeAlarmsReturnsOnCall[i] = struct {
		result1 *cloudwatch.DescribeAlarmsOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeCloudWatchAPI) DescribeAlarmsForMetric(arg1 *cloudwatch.DescribeAlarmsForMetricInput) (*cloudwatch.DescribeAlarmsForMetricOutput, error) {
	fake.describeAlarmsForMetricMutex.Lock()
	ret, specificReturn := fake.describeAlarmsForMetricReturnsOnCall[len(fake.describeAlarmsForMetricArgsForCall)]
	fake.describeAlarmsForMetricArgsForCall = append(fake.describeAlarmsForMetricArgsForCall, struct {
		arg1 *cloudwatch.DescribeAlarmsForMetricInput
	}{arg1})
	fake.recordInvocation("DescribeAlarmsForMetric", []interface{}{arg1})
	fake.describeAlarmsForMetricMutex.Unlock()
	if fake.DescribeAlarmsForMetricStub != nil {
		return fake.DescribeAlarmsForMetricStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.describeAlarmsForMetricReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeCloudWatchAPI) DescribeAlarmsForMetricCallCount() int {
	fake.describeAlarmsForMetricMutex.RLock()
	defer fake.describeAlarmsForMetricMutex.RUnlock()
	return len(fake.describeAlarmsForMetricArgsForCall)
}

func (fake *FakeCloudWatchAPI) DescribeAlarmsForMetricCalls(stub func(*cloudwatch.DescribeAlarmsForMetricInput) (*cloudwatch.DescribeAlarmsForMetricOutput, error)) {
	fake.describeAlarmsForMetricMutex.Lock()
	defer fake.describeAlarmsForMetricMutex.Unlock()
	fake.DescribeAlarmsForMetricStub = stub
}

func (fake *FakeCloudWatchAPI) DescribeAlarmsForMetricArgsForCall(i int) *cloudwatch.DescribeAlarmsForMetricInput {
	fake.describeAlarmsForMetricMutex.RLock()
	defer fake.describeAlarmsForMetricMutex.RUnlock()
	argsForCall := fake.describeAlarmsForMetricArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeCloudWatchAPI) DescribeAlarmsForMetricReturns(result1 *cloudwatch.DescribeAlarmsForMetricOutput, result2 error) {
	fake.describeAlarmsForMetricMutex.Lock()
	defer fake.describeAlarmsForMetricMutex.Unlock()
	fake.DescribeAlarmsForMetricStub = nil
	fake.describeAlarmsForMetricReturns = struct {
		result1 *cloudwatch.DescribeAlarmsForMetricOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeCloudWatchAPI) DescribeAlarmsForMetricReturnsOnCall(i int, result1 *cloudwatch.DescribeAlarmsForMetricOutput, result2 error) {
	fake.describeAlarmsForMetricMutex.Lock()
	defer fake.describeAlarmsForMetricMutex.Unlock()
	fake.DescribeAlarmsForMetricStub = nil
	if fake.describeAlarmsForMetricReturnsOnCall == nil {
		fake.describeAlarmsForMetricReturnsOnCall = make(map[int]struct {
			result1 *cloudwatch.DescribeAlarmsForMetricOutput
			result2 error
		})
	}
	fake.describeAlarmsForMetricReturnsOnCall[i] = struct {
		result1 *cloudwatch.DescribeAlarmsForMetricOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeCloudWatchAPI) DescribeAlarmsForMetricRequest(arg1 *cloudwatch.DescribeAlarmsForMetricInput) (*request.Request, *cloudwatch.DescribeAlarmsForMetricOutput) {
	fake.describeAlarmsForMetricRequestMutex.Lock()
	ret, specificReturn := fake.describeAlarmsForMetricRequestReturnsOnCall[len(fake.describeAlarmsForMetricRequestArgsForCall)]
	fake.describeAlarmsForMetricRequestArgsForCall = append(fake.describeAlarmsForMetricRequestArgsForCall, struct {
		arg1 *cloudwatch.DescribeAlarmsForMetricInput
	}{arg1})
	fake.recordInvocation("DescribeAlarmsForMetricRequest", []interface{}{arg1})
	fake.describeAlarmsForMetricRequestMutex.Unlock()
	if fake.DescribeAlarmsForMetricRequestStub != nil {
		return fake.DescribeAlarmsForMetricRequestStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.describeAlarmsForMetricRequestReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeCloudWatchAPI) DescribeAlarmsForMetricRequestCallCount() int {
	fake.describeAlarmsForMetricRequestMutex.RLock()
	defer fake.describeAlarmsForMetricRequestMutex.RUnlock()
	return len(fake.describeAlarmsForMetricRequestArgsForCall)
}

func (fake *FakeCloudWatchAPI) DescribeAlarmsForMetricRequestCalls(stub func(*cloudwatch.DescribeAlarmsForMetricInput) (*request.Request, *cloudwatch.DescribeAlarmsForMetricOutput)) {
	fake.describeAlarmsForMetricRequestMutex.Lock()
	defer fake.describeAlarmsForMetricRequestMutex.Unlock()
	fake.DescribeAlarmsForMetricRequestStub = stub
}

func (fake *FakeCloudWatchAPI) DescribeAlarmsForMetricRequestArgsForCall(i int) *cloudwatch.DescribeAlarmsForMetricInput {
	fake.describeAlarmsForMetricRequestMutex.RLock()
	defer fake.describeAlarmsForMetricRequestMutex.RUnlock()
	argsForCall := fake.describeAlarmsForMetricRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeCloudWatchAPI) DescribeAlarmsForMetricRequestReturns(result1 *request.Request, result2 *cloudwatch.DescribeAlarmsForMetricOutput) {
	fake.describeAlarmsForMetricRequestMutex.Lock()
	defer fake.describeAlarmsForMetricRequestMutex.Unlock()
	fake.DescribeAlarmsForMetricRequestStub = nil
	fake.describeAlarmsForMetricRequestReturns = struct {
		result1 *request.Request
		result2 *cloudwatch.DescribeAlarmsForMetricOutput
	}{result1, result2}
}

func (fake *FakeCloudWatchAPI) DescribeAlarmsForMetricRequestReturnsOnCall(i int, result1 *request.Request, result2 *cloudwatch.DescribeAlarmsForMetricOutput) {
	fake.describeAlarmsForMetricRequestMutex.Lock()
	defer fake.describeAlarmsForMetricRequestMutex.Unlock()
	fake.DescribeAlarmsForMetricRequestStub = nil
	if fake.describeAlarmsForMetricRequestReturnsOnCall == nil {
		fake.describeAlarmsForMetricRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *cloudwatch.DescribeAlarmsForMetricOutput
		})
	}
	fake.describeAlarmsForMetricRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *cloudwatch.DescribeAlarmsForMetricOutput
	}{result1, result2}
}

func (fake *FakeCloudWatchAPI) DescribeAlarmsForMetricWithContext(arg1 context.Context, arg2 *cloudwatch.DescribeAlarmsForMetricInput, arg3 ...request.Option) (*cloudwatch.DescribeAlarmsForMetricOutput, error) {
	fake.describeAlarmsForMetricWithContextMutex.Lock()
	ret, specificReturn := fake.describeAlarmsForMetricWithContextReturnsOnCall[len(fake.describeAlarmsForMetricWithContextArgsForCall)]
	fake.describeAlarmsForMetricWithContextArgsForCall = append(fake.describeAlarmsForMetricWithContextArgsForCall, struct {
		arg1 context.Context
		arg2 *cloudwatch.DescribeAlarmsForMetricInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	fake.recordInvocation("DescribeAlarmsForMetricWithContext", []interface{}{arg1, arg2, arg3})
	fake.describeAlarmsForMetricWithContextMutex.Unlock()
	if fake.DescribeAlarmsForMetricWithContextStub != nil {
		return fake.DescribeAlarmsForMetricWithContextStub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.describeAlarmsForMetricWithContextReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeCloudWatchAPI) DescribeAlarmsForMetricWithContextCallCount() int {
	fake.describeAlarmsForMetricWithContextMutex.RLock()
	defer fake.describeAlarmsForMetricWithContextMutex.RUnlock()
	return len(fake.describeAlarmsForMetricWithContextArgsForCall)
}

func (fake *FakeCloudWatchAPI) DescribeAlarmsForMetricWithContextCalls(stub func(context.Context, *cloudwatch.DescribeAlarmsForMetricInput, ...request.Option) (*cloudwatch.DescribeAlarmsForMetricOutput, error)) {
	fake.describeAlarmsForMetricWithContextMutex.Lock()
	defer fake.describeAlarmsForMetricWithContextMutex.Unlock()
	fake.DescribeAlarmsForMetricWithContextStub = stub
}

func (fake *FakeCloudWatchAPI) DescribeAlarmsForMetricWithContextArgsForCall(i int) (context.Context, *cloudwatch.DescribeAlarmsForMetricInput, []request.Option) {
	fake.describeAlarmsForMetricWithContextMutex.RLock()
	defer fake.describeAlarmsForMetricWithContextMutex.RUnlock()
	argsForCall := fake.describeAlarmsForMetricWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeCloudWatchAPI) DescribeAlarmsForMetricWithContextReturns(result1 *cloudwatch.DescribeAlarmsForMetricOutput, result2 error) {
	fake.describeAlarmsForMetricWithContextMutex.Lock()
	defer fake.describeAlarmsForMetricWithContextMutex.Unlock()
	fake.DescribeAlarmsForMetricWithContextStub = nil
	fake.describeAlarmsForMetricWithContextReturns = struct {
		result1 *cloudwatch.DescribeAlarmsForMetricOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeCloudWatchAPI) DescribeAlarmsForMetricWithContextReturnsOnCall(i int, result1 *cloudwatch.DescribeAlarmsForMetricOutput, result2 error) {
	fake.describeAlarmsForMetricWithContextMutex.Lock()
	defer fake.describeAlarmsForMetricWithContextMutex.Unlock()
	fake.DescribeAlarmsForMetricWithContextStub = nil
	if fake.describeAlarmsForMetricWithContextReturnsOnCall == nil {
		fake.describeAlarmsForMetricWithContextReturnsOnCall = make(map[int]struct {
			result1 *cloudwatch.DescribeAlarmsForMetricOutput
			result2 error
		})
	}
	fake.describeAlarmsForMetricWithContextReturnsOnCall[i] = struct {
		result1 *cloudwatch.DescribeAlarmsForMetricOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeCloudWatchAPI) DescribeAlarmsPages(arg1 *cloudwatch.DescribeAlarmsInput, arg2 func(*cloudwatch.DescribeAlarmsOutput, bool) bool) error {
	fake.describeAlarmsPagesMutex.Lock()
	ret, specificReturn := fake.describeAlarmsPagesReturnsOnCall[len(fake.describeAlarmsPagesArgsForCall)]
	fake.describeAlarmsPagesArgsForCall = append(fake.describeAlarmsPagesArgsForCall, struct {
		arg1 *cloudwatch.DescribeAlarmsInput
		arg2 func(*cloudwatch.DescribeAlarmsOutput, bool) bool
	}{arg1, arg2})
	fake.recordInvocation("DescribeAlarmsPages", []interface{}{arg1, arg2})
	fake.describeAlarmsPagesMutex.Unlock()
	if fake.DescribeAlarmsPagesStub != nil {
		return fake.DescribeAlarmsPagesStub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.describeAlarmsPagesReturns
	return fakeReturns.result1
}

func (fake *FakeCloudWatchAPI) DescribeAlarmsPagesCallCount() int {
	fake.describeAlarmsPagesMutex.RLock()
	defer fake.describeAlarmsPagesMutex.RUnlock()
	return len(fake.describeAlarmsPagesArgsForCall)
}

func (fake *FakeCloudWatchAPI) DescribeAlarmsPagesCalls(stub func(*cloudwatch.DescribeAlarmsInput, func(*cloudwatch.DescribeAlarmsOutput, bool) bool) error) {
	fake.describeAlarmsPagesMutex.Lock()
	defer fake.describeAlarmsPagesMutex.Unlock()
	fake.DescribeAlarmsPagesStub = stub
}

func (fake *FakeCloudWatchAPI) DescribeAlarmsPagesArgsForCall(i int) (*cloudwatch.DescribeAlarmsInput, func(*cloudwatch.DescribeAlarmsOutput, bool) bool) {
	fake.describeAlarmsPagesMutex.RLock()
	defer fake.describeAlarmsPagesMutex.RUnlock()
	argsForCall := fake.describeAlarmsPagesArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeCloudWatchAPI) DescribeAlarmsPagesReturns(result1 error) {
	fake.describeAlarmsPagesMutex.Lock()
	defer fake.describeAlarmsPagesMutex.Unlock()
	fake.DescribeAlarmsPagesStub = nil
	fake.describeAlarmsPagesReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeCloudWatchAPI) DescribeAlarmsPagesReturnsOnCall(i int, result1 error) {
	fake.describeAlarmsPagesMutex.Lock()
	defer fake.describeAlarmsPagesMutex.Unlock()
	fake.DescribeAlarmsPagesStub = nil
	if fake.describeAlarmsPagesReturnsOnCall == nil {
		fake.describeAlarmsPagesReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.describeAlarmsPagesReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeCloudWatchAPI) DescribeAlarmsPagesWithContext(arg1 context.Context, arg2 *cloudwatch.DescribeAlarmsInput, arg3 func(*cloudwatch.DescribeAlarmsOutput, bool) bool, arg4 ...request.Option) error {
	fake.describeAlarmsPagesWithContextMutex.Lock()
	ret, specificReturn := fake.describeAlarmsPagesWithContextReturnsOnCall[len(fake.describeAlarmsPagesWithContextArgsForCall)]
	fake.describeAlarmsPagesWithContextArgsForCall = append(fake.describeAlarmsPagesWithContextArgsForCall, struct {
		arg1 context.Context
		arg2 *cloudwatch.DescribeAlarmsInput
		arg3 func(*cloudwatch.DescribeAlarmsOutput, bool) bool
		arg4 []request.Option
	}{arg1, arg2, arg3, arg4})
	fake.recordInvocation("DescribeAlarmsPagesWithContext", []interface{}{arg1, arg2, arg3, arg4})
	fake.describeAlarmsPagesWithContextMutex.Unlock()
	if fake.DescribeAlarmsPagesWithContextStub != nil {
		return fake.DescribeAlarmsPagesWithContextStub(arg1, arg2, arg3, arg4...)
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.describeAlarmsPagesWithContextReturns
	return fakeReturns.result1
}

func (fake *FakeCloudWatchAPI) DescribeAlarmsPagesWithContextCallCount() int {
	fake.describeAlarmsPagesWithContextMutex.RLock()
	defer fake.describeAlarmsPagesWithContextMutex.RUnlock()
	return len(fake.describeAlarmsPagesWithContextArgsForCall)
}

func (fake *FakeCloudWatchAPI) DescribeAlarmsPagesWithContextCalls(stub func(context.Context, *cloudwatch.DescribeAlarmsInput, func(*cloudwatch.DescribeAlarmsOutput, bool) bool, ...request.Option) error) {
	fake.describeAlarmsPagesWithContextMutex.Lock()
	defer fake.describeAlarmsPagesWithContextMutex.Unlock()
	fake.DescribeAlarmsPagesWithContextStub = stub
}

func (fake *FakeCloudWatchAPI) DescribeAlarmsPagesWithContextArgsForCall(i int) (context.Context, *cloudwatch.DescribeAlarmsInput, func(*cloudwatch.DescribeAlarmsOutput, bool) bool, []request.Option) {
	fake.describeAlarmsPagesWithContextMutex.RLock()
	defer fake.describeAlarmsPagesWithContextMutex.RUnlock()
	argsForCall := fake.describeAlarmsPagesWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3, argsForCall.arg4
}

func (fake *FakeCloudWatchAPI) DescribeAlarmsPagesWithContextReturns(result1 error) {
	fake.describeAlarmsPagesWithContextMutex.Lock()
	defer fake.describeAlarmsPagesWithContextMutex.Unlock()
	fake.DescribeAlarmsPagesWithContextStub = nil
	fake.describeAlarmsPagesWithContextReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeCloudWatchAPI) DescribeAlarmsPagesWithContextReturnsOnCall(i int, result1 error) {
	fake.describeAlarmsPagesWithContextMutex.Lock()
	defer fake.describeAlarmsPagesWithContextMutex.Unlock()
	fake.DescribeAlarmsPagesWithContextStub = nil
	if fake.describeAlarmsPagesWithContextReturnsOnCall == nil {
		fake.describeAlarmsPagesWithContextReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.describeAlarmsPagesWithContextReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeCloudWatchAPI) DescribeAlarmsRequest(arg1 *cloudwatch.DescribeAlarmsInput) (*request.Request, *cloudwatch.DescribeAlarmsOutput) {
	fake.describeAlarmsRequestMutex.Lock()
	ret, specificReturn := fake.describeAlarmsRequestReturnsOnCall[len(fake.describeAlarmsRequestArgsForCall)]
	fake.describeAlarmsRequestArgsForCall = append(fake.describeAlarmsRequestArgsForCall, struct {
		arg1 *cloudwatch.DescribeAlarmsInput
	}{arg1})
	fake.recordInvocation("DescribeAlarmsRequest", []interface{}{arg1})
	fake.describeAlarmsRequestMutex.Unlock()
	if fake.DescribeAlarmsRequestStub != nil {
		return fake.DescribeAlarmsRequestStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.describeAlarmsRequestReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeCloudWatchAPI) DescribeAlarmsRequestCallCount() int {
	fake.describeAlarmsRequestMutex.RLock()
	defer fake.describeAlarmsRequestMutex.RUnlock()
	return len(fake.describeAlarmsRequestArgsForCall)
}

func (fake *FakeCloudWatchAPI) DescribeAlarmsRequestCalls(stub func(*cloudwatch.DescribeAlarmsInput) (*request.Request, *cloudwatch.DescribeAlarmsOutput)) {
	fake.describeAlarmsRequestMutex.Lock()
	defer fake.describeAlarmsRequestMutex.Unlock()
	fake.DescribeAlarmsRequestStub = stub
}

func (fake *FakeCloudWatchAPI) DescribeAlarmsRequestArgsForCall(i int) *cloudwatch.DescribeAlarmsInput {
	fake.describeAlarmsRequestMutex.RLock()
	defer fake.describeAlarmsRequestMutex.RUnlock()
	argsForCall := fake.describeAlarmsRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeCloudWatchAPI) DescribeAlarmsRequestReturns(result1 *request.Request, result2 *cloudwatch.DescribeAlarmsOutput) {
	fake.describeAlarmsRequestMutex.Lock()
	defer fake.describeAlarmsRequestMutex.Unlock()
	fake.DescribeAlarmsRequestStub = nil
	fake.describeAlarmsRequestReturns = struct {
		result1 *request.Request
		result2 *cloudwatch.DescribeAlarmsOutput
	}{result1, result2}
}

func (fake *FakeCloudWatchAPI) DescribeAlarmsRequestReturnsOnCall(i int, result1 *request.Request, result2 *cloudwatch.DescribeAlarmsOutput) {
	fake.describeAlarmsRequestMutex.Lock()
	defer fake.describeAlarmsRequestMutex.Unlock()
	fake.DescribeAlarmsRequestStub = nil
	if fake.describeAlarmsRequestReturnsOnCall == nil {
		fake.describeAlarmsRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *cloudwatch.DescribeAlarmsOutput
		})
	}
	fake.describeAlarmsRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *cloudwatch.DescribeAlarmsOutput
	}{result1, result2}
}

func (fake *FakeCloudWatchAPI) DescribeAlarmsWithContext(arg1 context.Context, arg2 *cloudwatch.DescribeAlarmsInput, arg3 ...request.Option) (*cloudwatch.DescribeAlarmsOutput, error) {
	fake.describeAlarmsWithContextMutex.Lock()
	ret, specificReturn := fake.describeAlarmsWithContextReturnsOnCall[len(fake.describeAlarmsWithContextArgsForCall)]
	fake.describeAlarmsWithContextArgsForCall = append(fake.describeAlarmsWithContextArgsForCall, struct {
		arg1 context.Context
		arg2 *cloudwatch.DescribeAlarmsInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	fake.recordInvocation("DescribeAlarmsWithContext", []interface{}{arg1, arg2, arg3})
	fake.describeAlarmsWithContextMutex.Unlock()
	if fake.DescribeAlarmsWithContextStub != nil {
		return fake.DescribeAlarmsWithContextStub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.describeAlarmsWithContextReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeCloudWatchAPI) DescribeAlarmsWithContextCallCount() int {
	fake.describeAlarmsWithContextMutex.RLock()
	defer fake.describeAlarmsWithContextMutex.RUnlock()
	return len(fake.describeAlarmsWithContextArgsForCall)
}

func (fake *FakeCloudWatchAPI) DescribeAlarmsWithContextCalls(stub func(context.Context, *cloudwatch.DescribeAlarmsInput, ...request.Option) (*cloudwatch.DescribeAlarmsOutput, error)) {
	fake.describeAlarmsWithContextMutex.Lock()
	defer fake.describeAlarmsWithContextMutex.Unlock()
	fake.DescribeAlarmsWithContextStub = stub
}

func (fake *FakeCloudWatchAPI) DescribeAlarmsWithContextArgsForCall(i int) (context.Context, *cloudwatch.DescribeAlarmsInput, []request.Option) {
	fake.describeAlarmsWithContextMutex.RLock()
	defer fake.describeAlarmsWithContextMutex.RUnlock()
	argsForCall := fake.describeAlarmsWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeCloudWatchAPI) DescribeAlarmsWithContextReturns(result1 *cloudwatch.DescribeAlarmsOutput, result2 error) {
	fake.describeAlarmsWithContextMutex.Lock()
	defer fake.describeAlarmsWithContextMutex.Unlock()
	fake.DescribeAlarmsWithContextStub = nil
	fake.describeAlarmsWithContextReturns = struct {
		result1 *cloudwatch.DescribeAlarmsOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeCloudWatchAPI) DescribeAlarmsWithContextReturnsOnCall(i int, result1 *cloudwatch.DescribeAlarmsOutput, result2 error) {
	fake.describeAlarmsWithContextMutex.Lock()
	defer fake.describeAlarmsWithContextMutex.Unlock()
	fake.DescribeAlarmsWithContextStub = nil
	if fake.describeAlarmsWithContextReturnsOnCall == nil {
		fake.describeAlarmsWithContextReturnsOnCall = make(map[int]struct {
			result1 *cloudwatch.DescribeAlarmsOutput
			result2 error
		})
	}
	fake.describeAlarmsWithContextReturnsOnCall[i] = struct {
		result1 *cloudwatch.DescribeAlarmsOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeCloudWatchAPI) DisableAlarmActions(arg1 *cloudwatch.DisableAlarmActionsInput) (*cloudwatch.DisableAlarmActionsOutput, error) {
	fake.disableAlarmActionsMutex.Lock()
	ret, specificReturn := fake.disableAlarmActionsReturnsOnCall[len(fake.disableAlarmActionsArgsForCall)]
	fake.disableAlarmActionsArgsForCall = append(fake.disableAlarmActionsArgsForCall, struct {
		arg1 *cloudwatch.DisableAlarmActionsInput
	}{arg1})
	fake.recordInvocation("DisableAlarmActions", []interface{}{arg1})
	fake.disableAlarmActionsMutex.Unlock()
	if fake.DisableAlarmActionsStub != nil {
		return fake.DisableAlarmActionsStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.disableAlarmActionsReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeCloudWatchAPI) DisableAlarmActionsCallCount() int {
	fake.disableAlarmActionsMutex.RLock()
	defer fake.disableAlarmActionsMutex.RUnlock()
	return len(fake.disableAlarmActionsArgsForCall)
}

func (fake *FakeCloudWatchAPI) DisableAlarmActionsCalls(stub func(*cloudwatch.DisableAlarmActionsInput) (*cloudwatch.DisableAlarmActionsOutput, error)) {
	fake.disableAlarmActionsMutex.Lock()
	defer fake.disableAlarmActionsMutex.Unlock()
	fake.DisableAlarmActionsStub = stub
}

func (fake *FakeCloudWatchAPI) DisableAlarmActionsArgsForCall(i int) *cloudwatch.DisableAlarmActionsInput {
	fake.disableAlarmActionsMutex.RLock()
	defer fake.disableAlarmActionsMutex.RUnlock()
	argsForCall := fake.disableAlarmActionsArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeCloudWatchAPI) DisableAlarmActionsReturns(result1 *cloudwatch.DisableAlarmActionsOutput, result2 error) {
	fake.disableAlarmActionsMutex.Lock()
	defer fake.disableAlarmActionsMutex.Unlock()
	fake.DisableAlarmActionsStub = nil
	fake.disableAlarmActionsReturns = struct {
		result1 *cloudwatch.DisableAlarmActionsOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeCloudWatchAPI) DisableAlarmActionsReturnsOnCall(i int, result1 *cloudwatch.DisableAlarmActionsOutput, result2 error) {
	fake.disableAlarmActionsMutex.Lock()
	defer fake.disableAlarmActionsMutex.Unlock()
	fake.DisableAlarmActionsStub = nil
	if fake.disableAlarmActionsReturnsOnCall == nil {
		fake.disableAlarmActionsReturnsOnCall = make(map[int]struct {
			result1 *cloudwatch.DisableAlarmActionsOutput
			result2 error
		})
	}
	fake.disableAlarmActionsReturnsOnCall[i] = struct {
		result1 *cloudwatch.DisableAlarmActionsOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeCloudWatchAPI) DisableAlarmActionsRequest(arg1 *cloudwatch.DisableAlarmActionsInput) (*request.Request, *cloudwatch.DisableAlarmActionsOutput) {
	fake.disableAlarmActionsRequestMutex.Lock()
	ret, specificReturn := fake.disableAlarmActionsRequestReturnsOnCall[len(fake.disableAlarmActionsRequestArgsForCall)]
	fake.disableAlarmActionsRequestArgsForCall = append(fake.disableAlarmActionsRequestArgsForCall, struct {
		arg1 *cloudwatch.DisableAlarmActionsInput
	}{arg1})
	fake.recordInvocation("DisableAlarmActionsRequest", []interface{}{arg1})
	fake.disableAlarmActionsRequestMutex.Unlock()
	if fake.DisableAlarmActionsRequestStub != nil {
		return fake.DisableAlarmActionsRequestStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.disableAlarmActionsRequestReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeCloudWatchAPI) DisableAlarmActionsRequestCallCount() int {
	fake.disableAlarmActionsRequestMutex.RLock()
	defer fake.disableAlarmActionsRequestMutex.RUnlock()
	return len(fake.disableAlarmActionsRequestArgsForCall)
}

func (fake *FakeCloudWatchAPI) DisableAlarmActionsRequestCalls(stub func(*cloudwatch.DisableAlarmActionsInput) (*request.Request, *cloudwatch.DisableAlarmActionsOutput)) {
	fake.disableAlarmActionsRequestMutex.Lock()
	defer fake.disableAlarmActionsRequestMutex.Unlock()
	fake.DisableAlarmActionsRequestStub = stub
}

func (fake *FakeCloudWatchAPI) DisableAlarmActionsRequestArgsForCall(i int) *cloudwatch.DisableAlarmActionsInput {
	fake.disableAlarmActionsRequestMutex.RLock()
	defer fake.disableAlarmActionsRequestMutex.RUnlock()
	argsForCall := fake.disableAlarmActionsRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeCloudWatchAPI) DisableAlarmActionsRequestReturns(result1 *request.Request, result2 *cloudwatch.DisableAlarmActionsOutput) {
	fake.disableAlarmActionsRequestMutex.Lock()
	defer fake.disableAlarmActionsRequestMutex.Unlock()
	fake.DisableAlarmActionsRequestStub = nil
	fake.disableAlarmActionsRequestReturns = struct {
		result1 *request.Request
		result2 *cloudwatch.DisableAlarmActionsOutput
	}{result1, result2}
}

func (fake *FakeCloudWatchAPI) DisableAlarmActionsRequestReturnsOnCall(i int, result1 *request.Request, result2 *cloudwatch.DisableAlarmActionsOutput) {
	fake.disableAlarmActionsRequestMutex.Lock()
	defer fake.disableAlarmActionsRequestMutex.Unlock()
	fake.DisableAlarmActionsRequestStub = nil
	if fake.disableAlarmActionsRequestReturnsOnCall == nil {
		fake.disableAlarmActionsRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *cloudwatch.DisableAlarmActionsOutput
		})
	}
	fake.disableAlarmActionsRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *cloudwatch.DisableAlarmActionsOutput
	}{result1, result2}
}

func (fake *FakeCloudWatchAPI) DisableAlarmActionsWithContext(arg1 context.Context, arg2 *cloudwatch.DisableAlarmActionsInput, arg3 ...request.Option) (*cloudwatch.DisableAlarmActionsOutput, error) {
	fake.disableAlarmActionsWithContextMutex.Lock()
	ret, specificReturn := fake.disableAlarmActionsWithContextReturnsOnCall[len(fake.disableAlarmActionsWithContextArgsForCall)]
	fake.disableAlarmActionsWithContextArgsForCall = append(fake.disableAlarmActionsWithContextArgsForCall, struct {
		arg1 context.Context
		arg2 *cloudwatch.DisableAlarmActionsInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	fake.recordInvocation("DisableAlarmActionsWithContext", []interface{}{arg1, arg2, arg3})
	fake.disableAlarmActionsWithContextMutex.Unlock()
	if fake.DisableAlarmActionsWithContextStub != nil {
		return fake.DisableAlarmActionsWithContextStub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.disableAlarmActionsWithContextReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeCloudWatchAPI) DisableAlarmActionsWithContextCallCount() int {
	fake.disableAlarmActionsWithContextMutex.RLock()
	defer fake.disableAlarmActionsWithContextMutex.RUnlock()
	return len(fake.disableAlarmActionsWithContextArgsForCall)
}

func (fake *FakeCloudWatchAPI) DisableAlarmActionsWithContextCalls(stub func(context.Context, *cloudwatch.DisableAlarmActionsInput, ...request.Option) (*cloudwatch.DisableAlarmActionsOutput, error)) {
	fake.disableAlarmActionsWithContextMutex.Lock()
	defer fake.disableAlarmActionsWithContextMutex.Unlock()
	fake.DisableAlarmActionsWithContextStub = stub
}

func (fake *FakeCloudWatchAPI) DisableAlarmActionsWithContextArgsForCall(i int) (context.Context, *cloudwatch.DisableAlarmActionsInput, []request.Option) {
	fake.disableAlarmActionsWithContextMutex.RLock()
	defer fake.disableAlarmActionsWithContextMutex.RUnlock()
	argsForCall := fake.disableAlarmActionsWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeCloudWatchAPI) DisableAlarmActionsWithContextReturns(result1 *cloudwatch.DisableAlarmActionsOutput, result2 error) {
	fake.disableAlarmActionsWithContextMutex.Lock()
	defer fake.disableAlarmActionsWithContextMutex.Unlock()
	fake.DisableAlarmActionsWithContextStub = nil
	fake.disableAlarmActionsWithContextReturns = struct {
		result1 *cloudwatch.DisableAlarmActionsOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeCloudWatchAPI) DisableAlarmActionsWithContextReturnsOnCall(i int, result1 *cloudwatch.DisableAlarmActionsOutput, result2 error) {
	fake.disableAlarmActionsWithContextMutex.Lock()
	defer fake.disableAlarmActionsWithContextMutex.Unlock()
	fake.DisableAlarmActionsWithContextStub = nil
	if fake.disableAlarmActionsWithContextReturnsOnCall == nil {
		fake.disableAlarmActionsWithContextReturnsOnCall = make(map[int]struct {
			result1 *cloudwatch.DisableAlarmActionsOutput
			result2 error
		})
	}
	fake.disableAlarmActionsWithContextReturnsOnCall[i] = struct {
		result1 *cloudwatch.DisableAlarmActionsOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeCloudWatchAPI) EnableAlarmActions(arg1 *cloudwatch.EnableAlarmActionsInput) (*cloudwatch.EnableAlarmActionsOutput, error) {
	fake.enableAlarmActionsMutex.Lock()
	ret, specificReturn := fake.enableAlarmActionsReturnsOnCall[len(fake.enableAlarmActionsArgsForCall)]
	fake.enableAlarmActionsArgsForCall = append(fake.enableAlarmActionsArgsForCall, struct {
		arg1 *cloudwatch.EnableAlarmActionsInput
	}{arg1})
	fake.recordInvocation("EnableAlarmActions", []interface{}{arg1})
	fake.enableAlarmActionsMutex.Unlock()
	if fake.EnableAlarmActionsStub != nil {
		return fake.EnableAlarmActionsStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.enableAlarmActionsReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeCloudWatchAPI) EnableAlarmActionsCallCount() int {
	fake.enableAlarmActionsMutex.RLock()
	defer fake.enableAlarmActionsMutex.RUnlock()
	return len(fake.enableAlarmActionsArgsForCall)
}

func (fake *FakeCloudWatchAPI) EnableAlarmActionsCalls(stub func(*cloudwatch.EnableAlarmActionsInput) (*cloudwatch.EnableAlarmActionsOutput, error)) {
	fake.enableAlarmActionsMutex.Lock()
	defer fake.enableAlarmActionsMutex.Unlock()
	fake.EnableAlarmActionsStub = stub
}

func (fake *FakeCloudWatchAPI) EnableAlarmActionsArgsForCall(i int) *cloudwatch.EnableAlarmActionsInput {
	fake.enableAlarmActionsMutex.RLock()
	defer fake.enableAlarmActionsMutex.RUnlock()
	argsForCall := fake.enableAlarmActionsArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeCloudWatchAPI) EnableAlarmActionsReturns(result1 *cloudwatch.EnableAlarmActionsOutput, result2 error) {
	fake.enableAlarmActionsMutex.Lock()
	defer fake.enableAlarmActionsMutex.Unlock()
	fake.EnableAlarmActionsStub = nil
	fake.enableAlarmActionsReturns = struct {
		result1 *cloudwatch.EnableAlarmActionsOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeCloudWatchAPI) EnableAlarmActionsReturnsOnCall(i int, result1 *cloudwatch.EnableAlarmActionsOutput, result2 error) {
	fake.enableAlarmActionsMutex.Lock()
	defer fake.enableAlarmActionsMutex.Unlock()
	fake.EnableAlarmActionsStub = nil
	if fake.enableAlarmActionsReturnsOnCall == nil {
		fake.enableAlarmActionsReturnsOnCall = make(map[int]struct {
			result1 *cloudwatch.EnableAlarmActionsOutput
			result2 error
		})
	}
	fake.enableAlarmActionsReturnsOnCall[i] = struct {
		result1 *cloudwatch.EnableAlarmActionsOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeCloudWatchAPI) EnableAlarmActionsRequest(arg1 *cloudwatch.EnableAlarmActionsInput) (*request.Request, *cloudwatch.EnableAlarmActionsOutput) {
	fake.enableAlarmActionsRequestMutex.Lock()
	ret, specificReturn := fake.enableAlarmActionsRequestReturnsOnCall[len(fake.enableAlarmActionsRequestArgsForCall)]
	fake.enableAlarmActionsRequestArgsForCall = append(fake.enableAlarmActionsRequestArgsForCall, struct {
		arg1 *cloudwatch.EnableAlarmActionsInput
	}{arg1})
	fake.recordInvocation("EnableAlarmActionsRequest", []interface{}{arg1})
	fake.enableAlarmActionsRequestMutex.Unlock()
	if fake.EnableAlarmActionsRequestStub != nil {
		return fake.EnableAlarmActionsRequestStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.enableAlarmActionsRequestReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeCloudWatchAPI) EnableAlarmActionsRequestCallCount() int {
	fake.enableAlarmActionsRequestMutex.RLock()
	defer fake.enableAlarmActionsRequestMutex.RUnlock()
	return len(fake.enableAlarmActionsRequestArgsForCall)
}

func (fake *FakeCloudWatchAPI) EnableAlarmActionsRequestCalls(stub func(*cloudwatch.EnableAlarmActionsInput) (*request.Request, *cloudwatch.EnableAlarmActionsOutput)) {
	fake.enableAlarmActionsRequestMutex.Lock()
	defer fake.enableAlarmActionsRequestMutex.Unlock()
	fake.EnableAlarmActionsRequestStub = stub
}

func (fake *FakeCloudWatchAPI) EnableAlarmActionsRequestArgsForCall(i int) *cloudwatch.EnableAlarmActionsInput {
	fake.enableAlarmActionsRequestMutex.RLock()
	defer fake.enableAlarmActionsRequestMutex.RUnlock()
	argsForCall := fake.enableAlarmActionsRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeCloudWatchAPI) EnableAlarmActionsRequestReturns(result1 *request.Request, result2 *cloudwatch.EnableAlarmActionsOutput) {
	fake.enableAlarmActionsRequestMutex.Lock()
	defer fake.enableAlarmActionsRequestMutex.Unlock()
	fake.EnableAlarmActionsRequestStub = nil
	fake.enableAlarmActionsRequestReturns = struct {
		result1 *request.Request
		result2 *cloudwatch.EnableAlarmActionsOutput
	}{result1, result2}
}

func (fake *FakeCloudWatchAPI) EnableAlarmActionsRequestReturnsOnCall(i int, result1 *request.Request, result2 *cloudwatch.EnableAlarmActionsOutput) {
	fake.enableAlarmActionsRequestMutex.Lock()
	defer fake.enableAlarmActionsRequestMutex.Unlock()
	fake.EnableAlarmActionsRequestStub = nil
	if fake.enableAlarmActionsRequestReturnsOnCall == nil {
		fake.enableAlarmActionsRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *cloudwatch.EnableAlarmActionsOutput
		})
	}
	fake.enableAlarmActionsRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *cloudwatch.EnableAlarmActionsOutput
	}{result1, result2}
}

func (fake *FakeCloudWatchAPI) EnableAlarmActionsWithContext(arg1 context.Context, arg2 *cloudwatch.EnableAlarmActionsInput, arg3 ...request.Option) (*cloudwatch.EnableAlarmActionsOutput, error) {
	fake.enableAlarmActionsWithContextMutex.Lock()
	ret, specificReturn := fake.enableAlarmActionsWithContextReturnsOnCall[len(fake.enableAlarmActionsWithContextArgsForCall)]
	fake.enableAlarmActionsWithContextArgsForCall = append(fake.enableAlarmActionsWithContextArgsForCall, struct {
		arg1 context.Context
		arg2 *cloudwatch.EnableAlarmActionsInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	fake.recordInvocation("EnableAlarmActionsWithContext", []interface{}{arg1, arg2, arg3})
	fake.enableAlarmActionsWithContextMutex.Unlock()
	if fake.EnableAlarmActionsWithContextStub != nil {
		return fake.EnableAlarmActionsWithContextStub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.enableAlarmActionsWithContextReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeCloudWatchAPI) EnableAlarmActionsWithContextCallCount() int {
	fake.enableAlarmActionsWithContextMutex.RLock()
	defer fake.enableAlarmActionsWithContextMutex.RUnlock()
	return len(fake.enableAlarmActionsWithContextArgsForCall)
}

func (fake *FakeCloudWatchAPI) EnableAlarmActionsWithContextCalls(stub func(context.Context, *cloudwatch.EnableAlarmActionsInput, ...request.Option) (*cloudwatch.EnableAlarmActionsOutput, error)) {
	fake.enableAlarmActionsWithContextMutex.Lock()
	defer fake.enableAlarmActionsWithContextMutex.Unlock()
	fake.EnableAlarmActionsWithContextStub = stub
}

func (fake *FakeCloudWatchAPI) EnableAlarmActionsWithContextArgsForCall(i int) (context.Context, *cloudwatch.EnableAlarmActionsInput, []request.Option) {
	fake.enableAlarmActionsWithContextMutex.RLock()
	defer fake.enableAlarmActionsWithContextMutex.RUnlock()
	argsForCall := fake.enableAlarmActionsWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeCloudWatchAPI) EnableAlarmActionsWithContextReturns(result1 *cloudwatch.EnableAlarmActionsOutput, result2 error) {
	fake.enableAlarmActionsWithContextMutex.Lock()
	defer fake.enableAlarmActionsWithContextMutex.Unlock()
	fake.EnableAlarmActionsWithContextStub = nil
	fake.enableAlarmActionsWithContextReturns = struct {
		result1 *cloudwatch.EnableAlarmActionsOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeCloudWatchAPI) EnableAlarmActionsWithContextReturnsOnCall(i int, result1 *cloudwatch.EnableAlarmActionsOutput, result2 error) {
	fake.enableAlarmActionsWithContextMutex.Lock()
	defer fake.enableAlarmActionsWithContextMutex.Unlock()
	fake.EnableAlarmActionsWithContextStub = nil
	if fake.enableAlarmActionsWithContextReturnsOnCall == nil {
		fake.enableAlarmActionsWithContextReturnsOnCall = make(map[int]struct {
			result1 *cloudwatch.EnableAlarmActionsOutput
			result2 error
		})
	}
	fake.enableAlarmActionsWithContextReturnsOnCall[i] = struct {
		result1 *cloudwatch.EnableAlarmActionsOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeCloudWatchAPI) GetDashboard(arg1 *cloudwatch.GetDashboardInput) (*cloudwatch.GetDashboardOutput, error) {
	fake.getDashboardMutex.Lock()
	ret, specificReturn := fake.getDashboardReturnsOnCall[len(fake.getDashboardArgsForCall)]
	fake.getDashboardArgsForCall = append(fake.getDashboardArgsForCall, struct {
		arg1 *cloudwatch.GetDashboardInput
	}{arg1})
	fake.recordInvocation("GetDashboard", []interface{}{arg1})
	fake.getDashboardMutex.Unlock()
	if fake.GetDashboardStub != nil {
		return fake.GetDashboardStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.getDashboardReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeCloudWatchAPI) GetDashboardCallCount() int {
	fake.getDashboardMutex.RLock()
	defer fake.getDashboardMutex.RUnlock()
	return len(fake.getDashboardArgsForCall)
}

func (fake *FakeCloudWatchAPI) GetDashboardCalls(stub func(*cloudwatch.GetDashboardInput) (*cloudwatch.GetDashboardOutput, error)) {
	fake.getDashboardMutex.Lock()
	defer fake.getDashboardMutex.Unlock()
	fake.GetDashboardStub = stub
}

func (fake *FakeCloudWatchAPI) GetDashboardArgsForCall(i int) *cloudwatch.GetDashboardInput {
	fake.getDashboardMutex.RLock()
	defer fake.getDashboardMutex.RUnlock()
	argsForCall := fake.getDashboardArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeCloudWatchAPI) GetDashboardReturns(result1 *cloudwatch.GetDashboardOutput, result2 error) {
	fake.getDashboardMutex.Lock()
	defer fake.getDashboardMutex.Unlock()
	fake.GetDashboardStub = nil
	fake.getDashboardReturns = struct {
		result1 *cloudwatch.GetDashboardOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeCloudWatchAPI) GetDashboardReturnsOnCall(i int, result1 *cloudwatch.GetDashboardOutput, result2 error) {
	fake.getDashboardMutex.Lock()
	defer fake.getDashboardMutex.Unlock()
	fake.GetDashboardStub = nil
	if fake.getDashboardReturnsOnCall == nil {
		fake.getDashboardReturnsOnCall = make(map[int]struct {
			result1 *cloudwatch.GetDashboardOutput
			result2 error
		})
	}
	fake.getDashboardReturnsOnCall[i] = struct {
		result1 *cloudwatch.GetDashboardOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeCloudWatchAPI) GetDashboardRequest(arg1 *cloudwatch.GetDashboardInput) (*request.Request, *cloudwatch.GetDashboardOutput) {
	fake.getDashboardRequestMutex.Lock()
	ret, specificReturn := fake.getDashboardRequestReturnsOnCall[len(fake.getDashboardRequestArgsForCall)]
	fake.getDashboardRequestArgsForCall = append(fake.getDashboardRequestArgsForCall, struct {
		arg1 *cloudwatch.GetDashboardInput
	}{arg1})
	fake.recordInvocation("GetDashboardRequest", []interface{}{arg1})
	fake.getDashboardRequestMutex.Unlock()
	if fake.GetDashboardRequestStub != nil {
		return fake.GetDashboardRequestStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.getDashboardRequestReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeCloudWatchAPI) GetDashboardRequestCallCount() int {
	fake.getDashboardRequestMutex.RLock()
	defer fake.getDashboardRequestMutex.RUnlock()
	return len(fake.getDashboardRequestArgsForCall)
}

func (fake *FakeCloudWatchAPI) GetDashboardRequestCalls(stub func(*cloudwatch.GetDashboardInput) (*request.Request, *cloudwatch.GetDashboardOutput)) {
	fake.getDashboardRequestMutex.Lock()
	defer fake.getDashboardRequestMutex.Unlock()
	fake.GetDashboardRequestStub = stub
}

func (fake *FakeCloudWatchAPI) GetDashboardRequestArgsForCall(i int) *cloudwatch.GetDashboardInput {
	fake.getDashboardRequestMutex.RLock()
	defer fake.getDashboardRequestMutex.RUnlock()
	argsForCall := fake.getDashboardRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeCloudWatchAPI) GetDashboardRequestReturns(result1 *request.Request, result2 *cloudwatch.GetDashboardOutput) {
	fake.getDashboardRequestMutex.Lock()
	defer fake.getDashboardRequestMutex.Unlock()
	fake.GetDashboardRequestStub = nil
	fake.getDashboardRequestReturns = struct {
		result1 *request.Request
		result2 *cloudwatch.GetDashboardOutput
	}{result1, result2}
}

func (fake *FakeCloudWatchAPI) GetDashboardRequestReturnsOnCall(i int, result1 *request.Request, result2 *cloudwatch.GetDashboardOutput) {
	fake.getDashboardRequestMutex.Lock()
	defer fake.getDashboardRequestMutex.Unlock()
	fake.GetDashboardRequestStub = nil
	if fake.getDashboardRequestReturnsOnCall == nil {
		fake.getDashboardRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *cloudwatch.GetDashboardOutput
		})
	}
	fake.getDashboardRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *cloudwatch.GetDashboardOutput
	}{result1, result2}
}

func (fake *FakeCloudWatchAPI) GetDashboardWithContext(arg1 context.Context, arg2 *cloudwatch.GetDashboardInput, arg3 ...request.Option) (*cloudwatch.GetDashboardOutput, error) {
	fake.getDashboardWithContextMutex.Lock()
	ret, specificReturn := fake.getDashboardWithContextReturnsOnCall[len(fake.getDashboardWithContextArgsForCall)]
	fake.getDashboardWithContextArgsForCall = append(fake.getDashboardWithContextArgsForCall, struct {
		arg1 context.Context
		arg2 *cloudwatch.GetDashboardInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	fake.recordInvocation("GetDashboardWithContext", []interface{}{arg1, arg2, arg3})
	fake.getDashboardWithContextMutex.Unlock()
	if fake.GetDashboardWithContextStub != nil {
		return fake.GetDashboardWithContextStub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.getDashboardWithContextReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeCloudWatchAPI) GetDashboardWithContextCallCount() int {
	fake.getDashboardWithContextMutex.RLock()
	defer fake.getDashboardWithContextMutex.RUnlock()
	return len(fake.getDashboardWithContextArgsForCall)
}

func (fake *FakeCloudWatchAPI) GetDashboardWithContextCalls(stub func(context.Context, *cloudwatch.GetDashboardInput, ...request.Option) (*cloudwatch.GetDashboardOutput, error)) {
	fake.getDashboardWithContextMutex.Lock()
	defer fake.getDashboardWithContextMutex.Unlock()
	fake.GetDashboardWithContextStub = stub
}

func (fake *FakeCloudWatchAPI) GetDashboardWithContextArgsForCall(i int) (context.Context, *cloudwatch.GetDashboardInput, []request.Option) {
	fake.getDashboardWithContextMutex.RLock()
	defer fake.getDashboardWithContextMutex.RUnlock()
	argsForCall := fake.getDashboardWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeCloudWatchAPI) GetDashboardWithContextReturns(result1 *cloudwatch.GetDashboardOutput, result2 error) {
	fake.getDashboardWithContextMutex.Lock()
	defer fake.getDashboardWithContextMutex.Unlock()
	fake.GetDashboardWithContextStub = nil
	fake.getDashboardWithContextReturns = struct {
		result1 *cloudwatch.GetDashboardOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeCloudWatchAPI) GetDashboardWithContextReturnsOnCall(i int, result1 *cloudwatch.GetDashboardOutput, result2 error) {
	fake.getDashboardWithContextMutex.Lock()
	defer fake.getDashboardWithContextMutex.Unlock()
	fake.GetDashboardWithContextStub = nil
	if fake.getDashboardWithContextReturnsOnCall == nil {
		fake.getDashboardWithContextReturnsOnCall = make(map[int]struct {
			result1 *cloudwatch.GetDashboardOutput
			result2 error
		})
	}
	fake.getDashboardWithContextReturnsOnCall[i] = struct {
		result1 *cloudwatch.GetDashboardOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeCloudWatchAPI) GetMetricData(arg1 *cloudwatch.GetMetricDataInput) (*cloudwatch.GetMetricDataOutput, error) {
	fake.getMetricDataMutex.Lock()
	ret, specificReturn := fake.getMetricDataReturnsOnCall[len(fake.getMetricDataArgsForCall)]
	fake.getMetricDataArgsForCall = append(fake.getMetricDataArgsForCall, struct {
		arg1 *cloudwatch.GetMetricDataInput
	}{arg1})
	fake.recordInvocation("GetMetricData", []interface{}{arg1})
	fake.getMetricDataMutex.Unlock()
	if fake.GetMetricDataStub != nil {
		return fake.GetMetricDataStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.getMetricDataReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeCloudWatchAPI) GetMetricDataCallCount() int {
	fake.getMetricDataMutex.RLock()
	defer fake.getMetricDataMutex.RUnlock()
	return len(fake.getMetricDataArgsForCall)
}

func (fake *FakeCloudWatchAPI) GetMetricDataCalls(stub func(*cloudwatch.GetMetricDataInput) (*cloudwatch.GetMetricDataOutput, error)) {
	fake.getMetricDataMutex.Lock()
	defer fake.getMetricDataMutex.Unlock()
	fake.GetMetricDataStub = stub
}

func (fake *FakeCloudWatchAPI) GetMetricDataArgsForCall(i int) *cloudwatch.GetMetricDataInput {
	fake.getMetricDataMutex.RLock()
	defer fake.getMetricDataMutex.RUnlock()
	argsForCall := fake.getMetricDataArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeCloudWatchAPI) GetMetricDataReturns(result1 *cloudwatch.GetMetricDataOutput, result2 error) {
	fake.getMetricDataMutex.Lock()
	defer fake.getMetricDataMutex.Unlock()
	fake.GetMetricDataStub = nil
	fake.getMetricDataReturns = struct {
		result1 *cloudwatch.GetMetricDataOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeCloudWatchAPI) GetMetricDataReturnsOnCall(i int, result1 *cloudwatch.GetMetricDataOutput, result2 error) {
	fake.getMetricDataMutex.Lock()
	defer fake.getMetricDataMutex.Unlock()
	fake.GetMetricDataStub = nil
	if fake.getMetricDataReturnsOnCall == nil {
		fake.getMetricDataReturnsOnCall = make(map[int]struct {
			result1 *cloudwatch.GetMetricDataOutput
			result2 error
		})
	}
	fake.getMetricDataReturnsOnCall[i] = struct {
		result1 *cloudwatch.GetMetricDataOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeCloudWatchAPI) GetMetricDataRequest(arg1 *cloudwatch.GetMetricDataInput) (*request.Request, *cloudwatch.GetMetricDataOutput) {
	fake.getMetricDataRequestMutex.Lock()
	ret, specificReturn := fake.getMetricDataRequestReturnsOnCall[len(fake.getMetricDataRequestArgsForCall)]
	fake.getMetricDataRequestArgsForCall = append(fake.getMetricDataRequestArgsForCall, struct {
		arg1 *cloudwatch.GetMetricDataInput
	}{arg1})
	fake.recordInvocation("GetMetricDataRequest", []interface{}{arg1})
	fake.getMetricDataRequestMutex.Unlock()
	if fake.GetMetricDataRequestStub != nil {
		return fake.GetMetricDataRequestStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.getMetricDataRequestReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeCloudWatchAPI) GetMetricDataRequestCallCount() int {
	fake.getMetricDataRequestMutex.RLock()
	defer fake.getMetricDataRequestMutex.RUnlock()
	return len(fake.getMetricDataRequestArgsForCall)
}

func (fake *FakeCloudWatchAPI) GetMetricDataRequestCalls(stub func(*cloudwatch.GetMetricDataInput) (*request.Request, *cloudwatch.GetMetricDataOutput)) {
	fake.getMetricDataRequestMutex.Lock()
	defer fake.getMetricDataRequestMutex.Unlock()
	fake.GetMetricDataRequestStub = stub
}

func (fake *FakeCloudWatchAPI) GetMetricDataRequestArgsForCall(i int) *cloudwatch.GetMetricDataInput {
	fake.getMetricDataRequestMutex.RLock()
	defer fake.getMetricDataRequestMutex.RUnlock()
	argsForCall := fake.getMetricDataRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeCloudWatchAPI) GetMetricDataRequestReturns(result1 *request.Request, result2 *cloudwatch.GetMetricDataOutput) {
	fake.getMetricDataRequestMutex.Lock()
	defer fake.getMetricDataRequestMutex.Unlock()
	fake.GetMetricDataRequestStub = nil
	fake.getMetricDataRequestReturns = struct {
		result1 *request.Request
		result2 *cloudwatch.GetMetricDataOutput
	}{result1, result2}
}

func (fake *FakeCloudWatchAPI) GetMetricDataRequestReturnsOnCall(i int, result1 *request.Request, result2 *cloudwatch.GetMetricDataOutput) {
	fake.getMetricDataRequestMutex.Lock()
	defer fake.getMetricDataRequestMutex.Unlock()
	fake.GetMetricDataRequestStub = nil
	if fake.getMetricDataRequestReturnsOnCall == nil {
		fake.getMetricDataRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *cloudwatch.GetMetricDataOutput
		})
	}
	fake.getMetricDataRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *cloudwatch.GetMetricDataOutput
	}{result1, result2}
}

func (fake *FakeCloudWatchAPI) GetMetricDataWithContext(arg1 context.Context, arg2 *cloudwatch.GetMetricDataInput, arg3 ...request.Option) (*cloudwatch.GetMetricDataOutput, error) {
	fake.getMetricDataWithContextMutex.Lock()
	ret, specificReturn := fake.getMetricDataWithContextReturnsOnCall[len(fake.getMetricDataWithContextArgsForCall)]
	fake.getMetricDataWithContextArgsForCall = append(fake.getMetricDataWithContextArgsForCall, struct {
		arg1 context.Context
		arg2 *cloudwatch.GetMetricDataInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	fake.recordInvocation("GetMetricDataWithContext", []interface{}{arg1, arg2, arg3})
	fake.getMetricDataWithContextMutex.Unlock()
	if fake.GetMetricDataWithContextStub != nil {
		return fake.GetMetricDataWithContextStub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.getMetricDataWithContextReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeCloudWatchAPI) GetMetricDataWithContextCallCount() int {
	fake.getMetricDataWithContextMutex.RLock()
	defer fake.getMetricDataWithContextMutex.RUnlock()
	return len(fake.getMetricDataWithContextArgsForCall)
}

func (fake *FakeCloudWatchAPI) GetMetricDataWithContextCalls(stub func(context.Context, *cloudwatch.GetMetricDataInput, ...request.Option) (*cloudwatch.GetMetricDataOutput, error)) {
	fake.getMetricDataWithContextMutex.Lock()
	defer fake.getMetricDataWithContextMutex.Unlock()
	fake.GetMetricDataWithContextStub = stub
}

func (fake *FakeCloudWatchAPI) GetMetricDataWithContextArgsForCall(i int) (context.Context, *cloudwatch.GetMetricDataInput, []request.Option) {
	fake.getMetricDataWithContextMutex.RLock()
	defer fake.getMetricDataWithContextMutex.RUnlock()
	argsForCall := fake.getMetricDataWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeCloudWatchAPI) GetMetricDataWithContextReturns(result1 *cloudwatch.GetMetricDataOutput, result2 error) {
	fake.getMetricDataWithContextMutex.Lock()
	defer fake.getMetricDataWithContextMutex.Unlock()
	fake.GetMetricDataWithContextStub = nil
	fake.getMetricDataWithContextReturns = struct {
		result1 *cloudwatch.GetMetricDataOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeCloudWatchAPI) GetMetricDataWithContextReturnsOnCall(i int, result1 *cloudwatch.GetMetricDataOutput, result2 error) {
	fake.getMetricDataWithContextMutex.Lock()
	defer fake.getMetricDataWithContextMutex.Unlock()
	fake.GetMetricDataWithContextStub = nil
	if fake.getMetricDataWithContextReturnsOnCall == nil {
		fake.getMetricDataWithContextReturnsOnCall = make(map[int]struct {
			result1 *cloudwatch.GetMetricDataOutput
			result2 error
		})
	}
	fake.getMetricDataWithContextReturnsOnCall[i] = struct {
		result1 *cloudwatch.GetMetricDataOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeCloudWatchAPI) GetMetricStatistics(arg1 *cloudwatch.GetMetricStatisticsInput) (*cloudwatch.GetMetricStatisticsOutput, error) {
	fake.getMetricStatisticsMutex.Lock()
	ret, specificReturn := fake.getMetricStatisticsReturnsOnCall[len(fake.getMetricStatisticsArgsForCall)]
	fake.getMetricStatisticsArgsForCall = append(fake.getMetricStatisticsArgsForCall, struct {
		arg1 *cloudwatch.GetMetricStatisticsInput
	}{arg1})
	fake.recordInvocation("GetMetricStatistics", []interface{}{arg1})
	fake.getMetricStatisticsMutex.Unlock()
	if fake.GetMetricStatisticsStub != nil {
		return fake.GetMetricStatisticsStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.getMetricStatisticsReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeCloudWatchAPI) GetMetricStatisticsCallCount() int {
	fake.getMetricStatisticsMutex.RLock()
	defer fake.getMetricStatisticsMutex.RUnlock()
	return len(fake.getMetricStatisticsArgsForCall)
}

func (fake *FakeCloudWatchAPI) GetMetricStatisticsCalls(stub func(*cloudwatch.GetMetricStatisticsInput) (*cloudwatch.GetMetricStatisticsOutput, error)) {
	fake.getMetricStatisticsMutex.Lock()
	defer fake.getMetricStatisticsMutex.Unlock()
	fake.GetMetricStatisticsStub = stub
}

func (fake *FakeCloudWatchAPI) GetMetricStatisticsArgsForCall(i int) *cloudwatch.GetMetricStatisticsInput {
	fake.getMetricStatisticsMutex.RLock()
	defer fake.getMetricStatisticsMutex.RUnlock()
	argsForCall := fake.getMetricStatisticsArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeCloudWatchAPI) GetMetricStatisticsReturns(result1 *cloudwatch.GetMetricStatisticsOutput, result2 error) {
	fake.getMetricStatisticsMutex.Lock()
	defer fake.getMetricStatisticsMutex.Unlock()
	fake.GetMetricStatisticsStub = nil
	fake.getMetricStatisticsReturns = struct {
		result1 *cloudwatch.GetMetricStatisticsOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeCloudWatchAPI) GetMetricStatisticsReturnsOnCall(i int, result1 *cloudwatch.GetMetricStatisticsOutput, result2 error) {
	fake.getMetricStatisticsMutex.Lock()
	defer fake.getMetricStatisticsMutex.Unlock()
	fake.GetMetricStatisticsStub = nil
	if fake.getMetricStatisticsReturnsOnCall == nil {
		fake.getMetricStatisticsReturnsOnCall = make(map[int]struct {
			result1 *cloudwatch.GetMetricStatisticsOutput
			result2 error
		})
	}
	fake.getMetricStatisticsReturnsOnCall[i] = struct {
		result1 *cloudwatch.GetMetricStatisticsOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeCloudWatchAPI) GetMetricStatisticsRequest(arg1 *cloudwatch.GetMetricStatisticsInput) (*request.Request, *cloudwatch.GetMetricStatisticsOutput) {
	fake.getMetricStatisticsRequestMutex.Lock()
	ret, specificReturn := fake.getMetricStatisticsRequestReturnsOnCall[len(fake.getMetricStatisticsRequestArgsForCall)]
	fake.getMetricStatisticsRequestArgsForCall = append(fake.getMetricStatisticsRequestArgsForCall, struct {
		arg1 *cloudwatch.GetMetricStatisticsInput
	}{arg1})
	fake.recordInvocation("GetMetricStatisticsRequest", []interface{}{arg1})
	fake.getMetricStatisticsRequestMutex.Unlock()
	if fake.GetMetricStatisticsRequestStub != nil {
		return fake.GetMetricStatisticsRequestStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.getMetricStatisticsRequestReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeCloudWatchAPI) GetMetricStatisticsRequestCallCount() int {
	fake.getMetricStatisticsRequestMutex.RLock()
	defer fake.getMetricStatisticsRequestMutex.RUnlock()
	return len(fake.getMetricStatisticsRequestArgsForCall)
}

func (fake *FakeCloudWatchAPI) GetMetricStatisticsRequestCalls(stub func(*cloudwatch.GetMetricStatisticsInput) (*request.Request, *cloudwatch.GetMetricStatisticsOutput)) {
	fake.getMetricStatisticsRequestMutex.Lock()
	defer fake.getMetricStatisticsRequestMutex.Unlock()
	fake.GetMetricStatisticsRequestStub = stub
}

func (fake *FakeCloudWatchAPI) GetMetricStatisticsRequestArgsForCall(i int) *cloudwatch.GetMetricStatisticsInput {
	fake.getMetricStatisticsRequestMutex.RLock()
	defer fake.getMetricStatisticsRequestMutex.RUnlock()
	argsForCall := fake.getMetricStatisticsRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeCloudWatchAPI) GetMetricStatisticsRequestReturns(result1 *request.Request, result2 *cloudwatch.GetMetricStatisticsOutput) {
	fake.getMetricStatisticsRequestMutex.Lock()
	defer fake.getMetricStatisticsRequestMutex.Unlock()
	fake.GetMetricStatisticsRequestStub = nil
	fake.getMetricStatisticsRequestReturns = struct {
		result1 *request.Request
		result2 *cloudwatch.GetMetricStatisticsOutput
	}{result1, result2}
}

func (fake *FakeCloudWatchAPI) GetMetricStatisticsRequestReturnsOnCall(i int, result1 *request.Request, result2 *cloudwatch.GetMetricStatisticsOutput) {
	fake.getMetricStatisticsRequestMutex.Lock()
	defer fake.getMetricStatisticsRequestMutex.Unlock()
	fake.GetMetricStatisticsRequestStub = nil
	if fake.getMetricStatisticsRequestReturnsOnCall == nil {
		fake.getMetricStatisticsRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *cloudwatch.GetMetricStatisticsOutput
		})
	}
	fake.getMetricStatisticsRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *cloudwatch.GetMetricStatisticsOutput
	}{result1, result2}
}

func (fake *FakeCloudWatchAPI) GetMetricStatisticsWithContext(arg1 context.Context, arg2 *cloudwatch.GetMetricStatisticsInput, arg3 ...request.Option) (*cloudwatch.GetMetricStatisticsOutput, error) {
	fake.getMetricStatisticsWithContextMutex.Lock()
	ret, specificReturn := fake.getMetricStatisticsWithContextReturnsOnCall[len(fake.getMetricStatisticsWithContextArgsForCall)]
	fake.getMetricStatisticsWithContextArgsForCall = append(fake.getMetricStatisticsWithContextArgsForCall, struct {
		arg1 context.Context
		arg2 *cloudwatch.GetMetricStatisticsInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	fake.recordInvocation("GetMetricStatisticsWithContext", []interface{}{arg1, arg2, arg3})
	fake.getMetricStatisticsWithContextMutex.Unlock()
	if fake.GetMetricStatisticsWithContextStub != nil {
		return fake.GetMetricStatisticsWithContextStub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.getMetricStatisticsWithContextReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeCloudWatchAPI) GetMetricStatisticsWithContextCallCount() int {
	fake.getMetricStatisticsWithContextMutex.RLock()
	defer fake.getMetricStatisticsWithContextMutex.RUnlock()
	return len(fake.getMetricStatisticsWithContextArgsForCall)
}

func (fake *FakeCloudWatchAPI) GetMetricStatisticsWithContextCalls(stub func(context.Context, *cloudwatch.GetMetricStatisticsInput, ...request.Option) (*cloudwatch.GetMetricStatisticsOutput, error)) {
	fake.getMetricStatisticsWithContextMutex.Lock()
	defer fake.getMetricStatisticsWithContextMutex.Unlock()
	fake.GetMetricStatisticsWithContextStub = stub
}

func (fake *FakeCloudWatchAPI) GetMetricStatisticsWithContextArgsForCall(i int) (context.Context, *cloudwatch.GetMetricStatisticsInput, []request.Option) {
	fake.getMetricStatisticsWithContextMutex.RLock()
	defer fake.getMetricStatisticsWithContextMutex.RUnlock()
	argsForCall := fake.getMetricStatisticsWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeCloudWatchAPI) GetMetricStatisticsWithContextReturns(result1 *cloudwatch.GetMetricStatisticsOutput, result2 error) {
	fake.getMetricStatisticsWithContextMutex.Lock()
	defer fake.getMetricStatisticsWithContextMutex.Unlock()
	fake.GetMetricStatisticsWithContextStub = nil
	fake.getMetricStatisticsWithContextReturns = struct {
		result1 *cloudwatch.GetMetricStatisticsOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeCloudWatchAPI) GetMetricStatisticsWithContextReturnsOnCall(i int, result1 *cloudwatch.GetMetricStatisticsOutput, result2 error) {
	fake.getMetricStatisticsWithContextMutex.Lock()
	defer fake.getMetricStatisticsWithContextMutex.Unlock()
	fake.GetMetricStatisticsWithContextStub = nil
	if fake.getMetricStatisticsWithContextReturnsOnCall == nil {
		fake.getMetricStatisticsWithContextReturnsOnCall = make(map[int]struct {
			result1 *cloudwatch.GetMetricStatisticsOutput
			result2 error
		})
	}
	fake.getMetricStatisticsWithContextReturnsOnCall[i] = struct {
		result1 *cloudwatch.GetMetricStatisticsOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeCloudWatchAPI) GetMetricWidgetImage(arg1 *cloudwatch.GetMetricWidgetImageInput) (*cloudwatch.GetMetricWidgetImageOutput, error) {
	fake.getMetricWidgetImageMutex.Lock()
	ret, specificReturn := fake.getMetricWidgetImageReturnsOnCall[len(fake.getMetricWidgetImageArgsForCall)]
	fake.getMetricWidgetImageArgsForCall = append(fake.getMetricWidgetImageArgsForCall, struct {
		arg1 *cloudwatch.GetMetricWidgetImageInput
	}{arg1})
	fake.recordInvocation("GetMetricWidgetImage", []interface{}{arg1})
	fake.getMetricWidgetImageMutex.Unlock()
	if fake.GetMetricWidgetImageStub != nil {
		return fake.GetMetricWidgetImageStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.getMetricWidgetImageReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeCloudWatchAPI) GetMetricWidgetImageCallCount() int {
	fake.getMetricWidgetImageMutex.RLock()
	defer fake.getMetricWidgetImageMutex.RUnlock()
	return len(fake.getMetricWidgetImageArgsForCall)
}

func (fake *FakeCloudWatchAPI) GetMetricWidgetImageCalls(stub func(*cloudwatch.GetMetricWidgetImageInput) (*cloudwatch.GetMetricWidgetImageOutput, error)) {
	fake.getMetricWidgetImageMutex.Lock()
	defer fake.getMetricWidgetImageMutex.Unlock()
	fake.GetMetricWidgetImageStub = stub
}

func (fake *FakeCloudWatchAPI) GetMetricWidgetImageArgsForCall(i int) *cloudwatch.GetMetricWidgetImageInput {
	fake.getMetricWidgetImageMutex.RLock()
	defer fake.getMetricWidgetImageMutex.RUnlock()
	argsForCall := fake.getMetricWidgetImageArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeCloudWatchAPI) GetMetricWidgetImageReturns(result1 *cloudwatch.GetMetricWidgetImageOutput, result2 error) {
	fake.getMetricWidgetImageMutex.Lock()
	defer fake.getMetricWidgetImageMutex.Unlock()
	fake.GetMetricWidgetImageStub = nil
	fake.getMetricWidgetImageReturns = struct {
		result1 *cloudwatch.GetMetricWidgetImageOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeCloudWatchAPI) GetMetricWidgetImageReturnsOnCall(i int, result1 *cloudwatch.GetMetricWidgetImageOutput, result2 error) {
	fake.getMetricWidgetImageMutex.Lock()
	defer fake.getMetricWidgetImageMutex.Unlock()
	fake.GetMetricWidgetImageStub = nil
	if fake.getMetricWidgetImageReturnsOnCall == nil {
		fake.getMetricWidgetImageReturnsOnCall = make(map[int]struct {
			result1 *cloudwatch.GetMetricWidgetImageOutput
			result2 error
		})
	}
	fake.getMetricWidgetImageReturnsOnCall[i] = struct {
		result1 *cloudwatch.GetMetricWidgetImageOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeCloudWatchAPI) GetMetricWidgetImageRequest(arg1 *cloudwatch.GetMetricWidgetImageInput) (*request.Request, *cloudwatch.GetMetricWidgetImageOutput) {
	fake.getMetricWidgetImageRequestMutex.Lock()
	ret, specificReturn := fake.getMetricWidgetImageRequestReturnsOnCall[len(fake.getMetricWidgetImageRequestArgsForCall)]
	fake.getMetricWidgetImageRequestArgsForCall = append(fake.getMetricWidgetImageRequestArgsForCall, struct {
		arg1 *cloudwatch.GetMetricWidgetImageInput
	}{arg1})
	fake.recordInvocation("GetMetricWidgetImageRequest", []interface{}{arg1})
	fake.getMetricWidgetImageRequestMutex.Unlock()
	if fake.GetMetricWidgetImageRequestStub != nil {
		return fake.GetMetricWidgetImageRequestStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.getMetricWidgetImageRequestReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeCloudWatchAPI) GetMetricWidgetImageRequestCallCount() int {
	fake.getMetricWidgetImageRequestMutex.RLock()
	defer fake.getMetricWidgetImageRequestMutex.RUnlock()
	return len(fake.getMetricWidgetImageRequestArgsForCall)
}

func (fake *FakeCloudWatchAPI) GetMetricWidgetImageRequestCalls(stub func(*cloudwatch.GetMetricWidgetImageInput) (*request.Request, *cloudwatch.GetMetricWidgetImageOutput)) {
	fake.getMetricWidgetImageRequestMutex.Lock()
	defer fake.getMetricWidgetImageRequestMutex.Unlock()
	fake.GetMetricWidgetImageRequestStub = stub
}

func (fake *FakeCloudWatchAPI) GetMetricWidgetImageRequestArgsForCall(i int) *cloudwatch.GetMetricWidgetImageInput {
	fake.getMetricWidgetImageRequestMutex.RLock()
	defer fake.getMetricWidgetImageRequestMutex.RUnlock()
	argsForCall := fake.getMetricWidgetImageRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeCloudWatchAPI) GetMetricWidgetImageRequestReturns(result1 *request.Request, result2 *cloudwatch.GetMetricWidgetImageOutput) {
	fake.getMetricWidgetImageRequestMutex.Lock()
	defer fake.getMetricWidgetImageRequestMutex.Unlock()
	fake.GetMetricWidgetImageRequestStub = nil
	fake.getMetricWidgetImageRequestReturns = struct {
		result1 *request.Request
		result2 *cloudwatch.GetMetricWidgetImageOutput
	}{result1, result2}
}

func (fake *FakeCloudWatchAPI) GetMetricWidgetImageRequestReturnsOnCall(i int, result1 *request.Request, result2 *cloudwatch.GetMetricWidgetImageOutput) {
	fake.getMetricWidgetImageRequestMutex.Lock()
	defer fake.getMetricWidgetImageRequestMutex.Unlock()
	fake.GetMetricWidgetImageRequestStub = nil
	if fake.getMetricWidgetImageRequestReturnsOnCall == nil {
		fake.getMetricWidgetImageRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *cloudwatch.GetMetricWidgetImageOutput
		})
	}
	fake.getMetricWidgetImageRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *cloudwatch.GetMetricWidgetImageOutput
	}{result1, result2}
}

func (fake *FakeCloudWatchAPI) GetMetricWidgetImageWithContext(arg1 context.Context, arg2 *cloudwatch.GetMetricWidgetImageInput, arg3 ...request.Option) (*cloudwatch.GetMetricWidgetImageOutput, error) {
	fake.getMetricWidgetImageWithContextMutex.Lock()
	ret, specificReturn := fake.getMetricWidgetImageWithContextReturnsOnCall[len(fake.getMetricWidgetImageWithContextArgsForCall)]
	fake.getMetricWidgetImageWithContextArgsForCall = append(fake.getMetricWidgetImageWithContextArgsForCall, struct {
		arg1 context.Context
		arg2 *cloudwatch.GetMetricWidgetImageInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	fake.recordInvocation("GetMetricWidgetImageWithContext", []interface{}{arg1, arg2, arg3})
	fake.getMetricWidgetImageWithContextMutex.Unlock()
	if fake.GetMetricWidgetImageWithContextStub != nil {
		return fake.GetMetricWidgetImageWithContextStub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.getMetricWidgetImageWithContextReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeCloudWatchAPI) GetMetricWidgetImageWithContextCallCount() int {
	fake.getMetricWidgetImageWithContextMutex.RLock()
	defer fake.getMetricWidgetImageWithContextMutex.RUnlock()
	return len(fake.getMetricWidgetImageWithContextArgsForCall)
}

func (fake *FakeCloudWatchAPI) GetMetricWidgetImageWithContextCalls(stub func(context.Context, *cloudwatch.GetMetricWidgetImageInput, ...request.Option) (*cloudwatch.GetMetricWidgetImageOutput, error)) {
	fake.getMetricWidgetImageWithContextMutex.Lock()
	defer fake.getMetricWidgetImageWithContextMutex.Unlock()
	fake.GetMetricWidgetImageWithContextStub = stub
}

func (fake *FakeCloudWatchAPI) GetMetricWidgetImageWithContextArgsForCall(i int) (context.Context, *cloudwatch.GetMetricWidgetImageInput, []request.Option) {
	fake.getMetricWidgetImageWithContextMutex.RLock()
	defer fake.getMetricWidgetImageWithContextMutex.RUnlock()
	argsForCall := fake.getMetricWidgetImageWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeCloudWatchAPI) GetMetricWidgetImageWithContextReturns(result1 *cloudwatch.GetMetricWidgetImageOutput, result2 error) {
	fake.getMetricWidgetImageWithContextMutex.Lock()
	defer fake.getMetricWidgetImageWithContextMutex.Unlock()
	fake.GetMetricWidgetImageWithContextStub = nil
	fake.getMetricWidgetImageWithContextReturns = struct {
		result1 *cloudwatch.GetMetricWidgetImageOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeCloudWatchAPI) GetMetricWidgetImageWithContextReturnsOnCall(i int, result1 *cloudwatch.GetMetricWidgetImageOutput, result2 error) {
	fake.getMetricWidgetImageWithContextMutex.Lock()
	defer fake.getMetricWidgetImageWithContextMutex.Unlock()
	fake.GetMetricWidgetImageWithContextStub = nil
	if fake.getMetricWidgetImageWithContextReturnsOnCall == nil {
		fake.getMetricWidgetImageWithContextReturnsOnCall = make(map[int]struct {
			result1 *cloudwatch.GetMetricWidgetImageOutput
			result2 error
		})
	}
	fake.getMetricWidgetImageWithContextReturnsOnCall[i] = struct {
		result1 *cloudwatch.GetMetricWidgetImageOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeCloudWatchAPI) ListDashboards(arg1 *cloudwatch.ListDashboardsInput) (*cloudwatch.ListDashboardsOutput, error) {
	fake.listDashboardsMutex.Lock()
	ret, specificReturn := fake.listDashboardsReturnsOnCall[len(fake.listDashboardsArgsForCall)]
	fake.listDashboardsArgsForCall = append(fake.listDashboardsArgsForCall, struct {
		arg1 *cloudwatch.ListDashboardsInput
	}{arg1})
	fake.recordInvocation("ListDashboards", []interface{}{arg1})
	fake.listDashboardsMutex.Unlock()
	if fake.ListDashboardsStub != nil {
		return fake.ListDashboardsStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.listDashboardsReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeCloudWatchAPI) ListDashboardsCallCount() int {
	fake.listDashboardsMutex.RLock()
	defer fake.listDashboardsMutex.RUnlock()
	return len(fake.listDashboardsArgsForCall)
}

func (fake *FakeCloudWatchAPI) ListDashboardsCalls(stub func(*cloudwatch.ListDashboardsInput) (*cloudwatch.ListDashboardsOutput, error)) {
	fake.listDashboardsMutex.Lock()
	defer fake.listDashboardsMutex.Unlock()
	fake.ListDashboardsStub = stub
}

func (fake *FakeCloudWatchAPI) ListDashboardsArgsForCall(i int) *cloudwatch.ListDashboardsInput {
	fake.listDashboardsMutex.RLock()
	defer fake.listDashboardsMutex.RUnlock()
	argsForCall := fake.listDashboardsArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeCloudWatchAPI) ListDashboardsReturns(result1 *cloudwatch.ListDashboardsOutput, result2 error) {
	fake.listDashboardsMutex.Lock()
	defer fake.listDashboardsMutex.Unlock()
	fake.ListDashboardsStub = nil
	fake.listDashboardsReturns = struct {
		result1 *cloudwatch.ListDashboardsOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeCloudWatchAPI) ListDashboardsReturnsOnCall(i int, result1 *cloudwatch.ListDashboardsOutput, result2 error) {
	fake.listDashboardsMutex.Lock()
	defer fake.listDashboardsMutex.Unlock()
	fake.ListDashboardsStub = nil
	if fake.listDashboardsReturnsOnCall == nil {
		fake.listDashboardsReturnsOnCall = make(map[int]struct {
			result1 *cloudwatch.ListDashboardsOutput
			result2 error
		})
	}
	fake.listDashboardsReturnsOnCall[i] = struct {
		result1 *cloudwatch.ListDashboardsOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeCloudWatchAPI) ListDashboardsRequest(arg1 *cloudwatch.ListDashboardsInput) (*request.Request, *cloudwatch.ListDashboardsOutput) {
	fake.listDashboardsRequestMutex.Lock()
	ret, specificReturn := fake.listDashboardsRequestReturnsOnCall[len(fake.listDashboardsRequestArgsForCall)]
	fake.listDashboardsRequestArgsForCall = append(fake.listDashboardsRequestArgsForCall, struct {
		arg1 *cloudwatch.ListDashboardsInput
	}{arg1})
	fake.recordInvocation("ListDashboardsRequest", []interface{}{arg1})
	fake.listDashboardsRequestMutex.Unlock()
	if fake.ListDashboardsRequestStub != nil {
		return fake.ListDashboardsRequestStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.listDashboardsRequestReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeCloudWatchAPI) ListDashboardsRequestCallCount() int {
	fake.listDashboardsRequestMutex.RLock()
	defer fake.listDashboardsRequestMutex.RUnlock()
	return len(fake.listDashboardsRequestArgsForCall)
}

func (fake *FakeCloudWatchAPI) ListDashboardsRequestCalls(stub func(*cloudwatch.ListDashboardsInput) (*request.Request, *cloudwatch.ListDashboardsOutput)) {
	fake.listDashboardsRequestMutex.Lock()
	defer fake.listDashboardsRequestMutex.Unlock()
	fake.ListDashboardsRequestStub = stub
}

func (fake *FakeCloudWatchAPI) ListDashboardsRequestArgsForCall(i int) *cloudwatch.ListDashboardsInput {
	fake.listDashboardsRequestMutex.RLock()
	defer fake.listDashboardsRequestMutex.RUnlock()
	argsForCall := fake.listDashboardsRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeCloudWatchAPI) ListDashboardsRequestReturns(result1 *request.Request, result2 *cloudwatch.ListDashboardsOutput) {
	fake.listDashboardsRequestMutex.Lock()
	defer fake.listDashboardsRequestMutex.Unlock()
	fake.ListDashboardsRequestStub = nil
	fake.listDashboardsRequestReturns = struct {
		result1 *request.Request
		result2 *cloudwatch.ListDashboardsOutput
	}{result1, result2}
}

func (fake *FakeCloudWatchAPI) ListDashboardsRequestReturnsOnCall(i int, result1 *request.Request, result2 *cloudwatch.ListDashboardsOutput) {
	fake.listDashboardsRequestMutex.Lock()
	defer fake.listDashboardsRequestMutex.Unlock()
	fake.ListDashboardsRequestStub = nil
	if fake.listDashboardsRequestReturnsOnCall == nil {
		fake.listDashboardsRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *cloudwatch.ListDashboardsOutput
		})
	}
	fake.listDashboardsRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *cloudwatch.ListDashboardsOutput
	}{result1, result2}
}

func (fake *FakeCloudWatchAPI) ListDashboardsWithContext(arg1 context.Context, arg2 *cloudwatch.ListDashboardsInput, arg3 ...request.Option) (*cloudwatch.ListDashboardsOutput, error) {
	fake.listDashboardsWithContextMutex.Lock()
	ret, specificReturn := fake.listDashboardsWithContextReturnsOnCall[len(fake.listDashboardsWithContextArgsForCall)]
	fake.listDashboardsWithContextArgsForCall = append(fake.listDashboardsWithContextArgsForCall, struct {
		arg1 context.Context
		arg2 *cloudwatch.ListDashboardsInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	fake.recordInvocation("ListDashboardsWithContext", []interface{}{arg1, arg2, arg3})
	fake.listDashboardsWithContextMutex.Unlock()
	if fake.ListDashboardsWithContextStub != nil {
		return fake.ListDashboardsWithContextStub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.listDashboardsWithContextReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeCloudWatchAPI) ListDashboardsWithContextCallCount() int {
	fake.listDashboardsWithContextMutex.RLock()
	defer fake.listDashboardsWithContextMutex.RUnlock()
	return len(fake.listDashboardsWithContextArgsForCall)
}

func (fake *FakeCloudWatchAPI) ListDashboardsWithContextCalls(stub func(context.Context, *cloudwatch.ListDashboardsInput, ...request.Option) (*cloudwatch.ListDashboardsOutput, error)) {
	fake.listDashboardsWithContextMutex.Lock()
	defer fake.listDashboardsWithContextMutex.Unlock()
	fake.ListDashboardsWithContextStub = stub
}

func (fake *FakeCloudWatchAPI) ListDashboardsWithContextArgsForCall(i int) (context.Context, *cloudwatch.ListDashboardsInput, []request.Option) {
	fake.listDashboardsWithContextMutex.RLock()
	defer fake.listDashboardsWithContextMutex.RUnlock()
	argsForCall := fake.listDashboardsWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeCloudWatchAPI) ListDashboardsWithContextReturns(result1 *cloudwatch.ListDashboardsOutput, result2 error) {
	fake.listDashboardsWithContextMutex.Lock()
	defer fake.listDashboardsWithContextMutex.Unlock()
	fake.ListDashboardsWithContextStub = nil
	fake.listDashboardsWithContextReturns = struct {
		result1 *cloudwatch.ListDashboardsOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeCloudWatchAPI) ListDashboardsWithContextReturnsOnCall(i int, result1 *cloudwatch.ListDashboardsOutput, result2 error) {
	fake.listDashboardsWithContextMutex.Lock()
	defer fake.listDashboardsWithContextMutex.Unlock()
	fake.ListDashboardsWithContextStub = nil
	if fake.listDashboardsWithContextReturnsOnCall == nil {
		fake.listDashboardsWithContextReturnsOnCall = make(map[int]struct {
			result1 *cloudwatch.ListDashboardsOutput
			result2 error
		})
	}
	fake.listDashboardsWithContextReturnsOnCall[i] = struct {
		result1 *cloudwatch.ListDashboardsOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeCloudWatchAPI) ListMetrics(arg1 *cloudwatch.ListMetricsInput) (*cloudwatch.ListMetricsOutput, error) {
	fake.listMetricsMutex.Lock()
	ret, specificReturn := fake.listMetricsReturnsOnCall[len(fake.listMetricsArgsForCall)]
	fake.listMetricsArgsForCall = append(fake.listMetricsArgsForCall, struct {
		arg1 *cloudwatch.ListMetricsInput
	}{arg1})
	fake.recordInvocation("ListMetrics", []interface{}{arg1})
	fake.listMetricsMutex.Unlock()
	if fake.ListMetricsStub != nil {
		return fake.ListMetricsStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.listMetricsReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeCloudWatchAPI) ListMetricsCallCount() int {
	fake.listMetricsMutex.RLock()
	defer fake.listMetricsMutex.RUnlock()
	return len(fake.listMetricsArgsForCall)
}

func (fake *FakeCloudWatchAPI) ListMetricsCalls(stub func(*cloudwatch.ListMetricsInput) (*cloudwatch.ListMetricsOutput, error)) {
	fake.listMetricsMutex.Lock()
	defer fake.listMetricsMutex.Unlock()
	fake.ListMetricsStub = stub
}

func (fake *FakeCloudWatchAPI) ListMetricsArgsForCall(i int) *cloudwatch.ListMetricsInput {
	fake.listMetricsMutex.RLock()
	defer fake.listMetricsMutex.RUnlock()
	argsForCall := fake.listMetricsArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeCloudWatchAPI) ListMetricsReturns(result1 *cloudwatch.ListMetricsOutput, result2 error) {
	fake.listMetricsMutex.Lock()
	defer fake.listMetricsMutex.Unlock()
	fake.ListMetricsStub = nil
	fake.listMetricsReturns = struct {
		result1 *cloudwatch.ListMetricsOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeCloudWatchAPI) ListMetricsReturnsOnCall(i int, result1 *cloudwatch.ListMetricsOutput, result2 error) {
	fake.listMetricsMutex.Lock()
	defer fake.listMetricsMutex.Unlock()
	fake.ListMetricsStub = nil
	if fake.listMetricsReturnsOnCall == nil {
		fake.listMetricsReturnsOnCall = make(map[int]struct {
			result1 *cloudwatch.ListMetricsOutput
			result2 error
		})
	}
	fake.listMetricsReturnsOnCall[i] = struct {
		result1 *cloudwatch.ListMetricsOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeCloudWatchAPI) ListMetricsPages(arg1 *cloudwatch.ListMetricsInput, arg2 func(*cloudwatch.ListMetricsOutput, bool) bool) error {
	fake.listMetricsPagesMutex.Lock()
	ret, specificReturn := fake.listMetricsPagesReturnsOnCall[len(fake.listMetricsPagesArgsForCall)]
	fake.listMetricsPagesArgsForCall = append(fake.listMetricsPagesArgsForCall, struct {
		arg1 *cloudwatch.ListMetricsInput
		arg2 func(*cloudwatch.ListMetricsOutput, bool) bool
	}{arg1, arg2})
	fake.recordInvocation("ListMetricsPages", []interface{}{arg1, arg2})
	fake.listMetricsPagesMutex.Unlock()
	if fake.ListMetricsPagesStub != nil {
		return fake.ListMetricsPagesStub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.listMetricsPagesReturns
	return fakeReturns.result1
}

func (fake *FakeCloudWatchAPI) ListMetricsPagesCallCount() int {
	fake.listMetricsPagesMutex.RLock()
	defer fake.listMetricsPagesMutex.RUnlock()
	return len(fake.listMetricsPagesArgsForCall)
}

func (fake *FakeCloudWatchAPI) ListMetricsPagesCalls(stub func(*cloudwatch.ListMetricsInput, func(*cloudwatch.ListMetricsOutput, bool) bool) error) {
	fake.listMetricsPagesMutex.Lock()
	defer fake.listMetricsPagesMutex.Unlock()
	fake.ListMetricsPagesStub = stub
}

func (fake *FakeCloudWatchAPI) ListMetricsPagesArgsForCall(i int) (*cloudwatch.ListMetricsInput, func(*cloudwatch.ListMetricsOutput, bool) bool) {
	fake.listMetricsPagesMutex.RLock()
	defer fake.listMetricsPagesMutex.RUnlock()
	argsForCall := fake.listMetricsPagesArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeCloudWatchAPI) ListMetricsPagesReturns(result1 error) {
	fake.listMetricsPagesMutex.Lock()
	defer fake.listMetricsPagesMutex.Unlock()
	fake.ListMetricsPagesStub = nil
	fake.listMetricsPagesReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeCloudWatchAPI) ListMetricsPagesReturnsOnCall(i int, result1 error) {
	fake.listMetricsPagesMutex.Lock()
	defer fake.listMetricsPagesMutex.Unlock()
	fake.ListMetricsPagesStub = nil
	if fake.listMetricsPagesReturnsOnCall == nil {
		fake.listMetricsPagesReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.listMetricsPagesReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeCloudWatchAPI) ListMetricsPagesWithContext(arg1 context.Context, arg2 *cloudwatch.ListMetricsInput, arg3 func(*cloudwatch.ListMetricsOutput, bool) bool, arg4 ...request.Option) error {
	fake.listMetricsPagesWithContextMutex.Lock()
	ret, specificReturn := fake.listMetricsPagesWithContextReturnsOnCall[len(fake.listMetricsPagesWithContextArgsForCall)]
	fake.listMetricsPagesWithContextArgsForCall = append(fake.listMetricsPagesWithContextArgsForCall, struct {
		arg1 context.Context
		arg2 *cloudwatch.ListMetricsInput
		arg3 func(*cloudwatch.ListMetricsOutput, bool) bool
		arg4 []request.Option
	}{arg1, arg2, arg3, arg4})
	fake.recordInvocation("ListMetricsPagesWithContext", []interface{}{arg1, arg2, arg3, arg4})
	fake.listMetricsPagesWithContextMutex.Unlock()
	if fake.ListMetricsPagesWithContextStub != nil {
		return fake.ListMetricsPagesWithContextStub(arg1, arg2, arg3, arg4...)
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.listMetricsPagesWithContextReturns
	return fakeReturns.result1
}

func (fake *FakeCloudWatchAPI) ListMetricsPagesWithContextCallCount() int {
	fake.listMetricsPagesWithContextMutex.RLock()
	defer fake.listMetricsPagesWithContextMutex.RUnlock()
	return len(fake.listMetricsPagesWithContextArgsForCall)
}

func (fake *FakeCloudWatchAPI) ListMetricsPagesWithContextCalls(stub func(context.Context, *cloudwatch.ListMetricsInput, func(*cloudwatch.ListMetricsOutput, bool) bool, ...request.Option) error) {
	fake.listMetricsPagesWithContextMutex.Lock()
	defer fake.listMetricsPagesWithContextMutex.Unlock()
	fake.ListMetricsPagesWithContextStub = stub
}

func (fake *FakeCloudWatchAPI) ListMetricsPagesWithContextArgsForCall(i int) (context.Context, *cloudwatch.ListMetricsInput, func(*cloudwatch.ListMetricsOutput, bool) bool, []request.Option) {
	fake.listMetricsPagesWithContextMutex.RLock()
	defer fake.listMetricsPagesWithContextMutex.RUnlock()
	argsForCall := fake.listMetricsPagesWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3, argsForCall.arg4
}

func (fake *FakeCloudWatchAPI) ListMetricsPagesWithContextReturns(result1 error) {
	fake.listMetricsPagesWithContextMutex.Lock()
	defer fake.listMetricsPagesWithContextMutex.Unlock()
	fake.ListMetricsPagesWithContextStub = nil
	fake.listMetricsPagesWithContextReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeCloudWatchAPI) ListMetricsPagesWithContextReturnsOnCall(i int, result1 error) {
	fake.listMetricsPagesWithContextMutex.Lock()
	defer fake.listMetricsPagesWithContextMutex.Unlock()
	fake.ListMetricsPagesWithContextStub = nil
	if fake.listMetricsPagesWithContextReturnsOnCall == nil {
		fake.listMetricsPagesWithContextReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.listMetricsPagesWithContextReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeCloudWatchAPI) ListMetricsRequest(arg1 *cloudwatch.ListMetricsInput) (*request.Request, *cloudwatch.ListMetricsOutput) {
	fake.listMetricsRequestMutex.Lock()
	ret, specificReturn := fake.listMetricsRequestReturnsOnCall[len(fake.listMetricsRequestArgsForCall)]
	fake.listMetricsRequestArgsForCall = append(fake.listMetricsRequestArgsForCall, struct {
		arg1 *cloudwatch.ListMetricsInput
	}{arg1})
	fake.recordInvocation("ListMetricsRequest", []interface{}{arg1})
	fake.listMetricsRequestMutex.Unlock()
	if fake.ListMetricsRequestStub != nil {
		return fake.ListMetricsRequestStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.listMetricsRequestReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeCloudWatchAPI) ListMetricsRequestCallCount() int {
	fake.listMetricsRequestMutex.RLock()
	defer fake.listMetricsRequestMutex.RUnlock()
	return len(fake.listMetricsRequestArgsForCall)
}

func (fake *FakeCloudWatchAPI) ListMetricsRequestCalls(stub func(*cloudwatch.ListMetricsInput) (*request.Request, *cloudwatch.ListMetricsOutput)) {
	fake.listMetricsRequestMutex.Lock()
	defer fake.listMetricsRequestMutex.Unlock()
	fake.ListMetricsRequestStub = stub
}

func (fake *FakeCloudWatchAPI) ListMetricsRequestArgsForCall(i int) *cloudwatch.ListMetricsInput {
	fake.listMetricsRequestMutex.RLock()
	defer fake.listMetricsRequestMutex.RUnlock()
	argsForCall := fake.listMetricsRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeCloudWatchAPI) ListMetricsRequestReturns(result1 *request.Request, result2 *cloudwatch.ListMetricsOutput) {
	fake.listMetricsRequestMutex.Lock()
	defer fake.listMetricsRequestMutex.Unlock()
	fake.ListMetricsRequestStub = nil
	fake.listMetricsRequestReturns = struct {
		result1 *request.Request
		result2 *cloudwatch.ListMetricsOutput
	}{result1, result2}
}

func (fake *FakeCloudWatchAPI) ListMetricsRequestReturnsOnCall(i int, result1 *request.Request, result2 *cloudwatch.ListMetricsOutput) {
	fake.listMetricsRequestMutex.Lock()
	defer fake.listMetricsRequestMutex.Unlock()
	fake.ListMetricsRequestStub = nil
	if fake.listMetricsRequestReturnsOnCall == nil {
		fake.listMetricsRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *cloudwatch.ListMetricsOutput
		})
	}
	fake.listMetricsRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *cloudwatch.ListMetricsOutput
	}{result1, result2}
}

func (fake *FakeCloudWatchAPI) ListMetricsWithContext(arg1 context.Context, arg2 *cloudwatch.ListMetricsInput, arg3 ...request.Option) (*cloudwatch.ListMetricsOutput, error) {
	fake.listMetricsWithContextMutex.Lock()
	ret, specificReturn := fake.listMetricsWithContextReturnsOnCall[len(fake.listMetricsWithContextArgsForCall)]
	fake.listMetricsWithContextArgsForCall = append(fake.listMetricsWithContextArgsForCall, struct {
		arg1 context.Context
		arg2 *cloudwatch.ListMetricsInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	fake.recordInvocation("ListMetricsWithContext", []interface{}{arg1, arg2, arg3})
	fake.listMetricsWithContextMutex.Unlock()
	if fake.ListMetricsWithContextStub != nil {
		return fake.ListMetricsWithContextStub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.listMetricsWithContextReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeCloudWatchAPI) ListMetricsWithContextCallCount() int {
	fake.listMetricsWithContextMutex.RLock()
	defer fake.listMetricsWithContextMutex.RUnlock()
	return len(fake.listMetricsWithContextArgsForCall)
}

func (fake *FakeCloudWatchAPI) ListMetricsWithContextCalls(stub func(context.Context, *cloudwatch.ListMetricsInput, ...request.Option) (*cloudwatch.ListMetricsOutput, error)) {
	fake.listMetricsWithContextMutex.Lock()
	defer fake.listMetricsWithContextMutex.Unlock()
	fake.ListMetricsWithContextStub = stub
}

func (fake *FakeCloudWatchAPI) ListMetricsWithContextArgsForCall(i int) (context.Context, *cloudwatch.ListMetricsInput, []request.Option) {
	fake.listMetricsWithContextMutex.RLock()
	defer fake.listMetricsWithContextMutex.RUnlock()
	argsForCall := fake.listMetricsWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeCloudWatchAPI) ListMetricsWithContextReturns(result1 *cloudwatch.ListMetricsOutput, result2 error) {
	fake.listMetricsWithContextMutex.Lock()
	defer fake.listMetricsWithContextMutex.Unlock()
	fake.ListMetricsWithContextStub = nil
	fake.listMetricsWithContextReturns = struct {
		result1 *cloudwatch.ListMetricsOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeCloudWatchAPI) ListMetricsWithContextReturnsOnCall(i int, result1 *cloudwatch.ListMetricsOutput, result2 error) {
	fake.listMetricsWithContextMutex.Lock()
	defer fake.listMetricsWithContextMutex.Unlock()
	fake.ListMetricsWithContextStub = nil
	if fake.listMetricsWithContextReturnsOnCall == nil {
		fake.listMetricsWithContextReturnsOnCall = make(map[int]struct {
			result1 *cloudwatch.ListMetricsOutput
			result2 error
		})
	}
	fake.listMetricsWithContextReturnsOnCall[i] = struct {
		result1 *cloudwatch.ListMetricsOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeCloudWatchAPI) PutDashboard(arg1 *cloudwatch.PutDashboardInput) (*cloudwatch.PutDashboardOutput, error) {
	fake.putDashboardMutex.Lock()
	ret, specificReturn := fake.putDashboardReturnsOnCall[len(fake.putDashboardArgsForCall)]
	fake.putDashboardArgsForCall = append(fake.putDashboardArgsForCall, struct {
		arg1 *cloudwatch.PutDashboardInput
	}{arg1})
	fake.recordInvocation("PutDashboard", []interface{}{arg1})
	fake.putDashboardMutex.Unlock()
	if fake.PutDashboardStub != nil {
		return fake.PutDashboardStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.putDashboardReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeCloudWatchAPI) PutDashboardCallCount() int {
	fake.putDashboardMutex.RLock()
	defer fake.putDashboardMutex.RUnlock()
	return len(fake.putDashboardArgsForCall)
}

func (fake *FakeCloudWatchAPI) PutDashboardCalls(stub func(*cloudwatch.PutDashboardInput) (*cloudwatch.PutDashboardOutput, error)) {
	fake.putDashboardMutex.Lock()
	defer fake.putDashboardMutex.Unlock()
	fake.PutDashboardStub = stub
}

func (fake *FakeCloudWatchAPI) PutDashboardArgsForCall(i int) *cloudwatch.PutDashboardInput {
	fake.putDashboardMutex.RLock()
	defer fake.putDashboardMutex.RUnlock()
	argsForCall := fake.putDashboardArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeCloudWatchAPI) PutDashboardReturns(result1 *cloudwatch.PutDashboardOutput, result2 error) {
	fake.putDashboardMutex.Lock()
	defer fake.putDashboardMutex.Unlock()
	fake.PutDashboardStub = nil
	fake.putDashboardReturns = struct {
		result1 *cloudwatch.PutDashboardOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeCloudWatchAPI) PutDashboardReturnsOnCall(i int, result1 *cloudwatch.PutDashboardOutput, result2 error) {
	fake.putDashboardMutex.Lock()
	defer fake.putDashboardMutex.Unlock()
	fake.PutDashboardStub = nil
	if fake.putDashboardReturnsOnCall == nil {
		fake.putDashboardReturnsOnCall = make(map[int]struct {
			result1 *cloudwatch.PutDashboardOutput
			result2 error
		})
	}
	fake.putDashboardReturnsOnCall[i] = struct {
		result1 *cloudwatch.PutDashboardOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeCloudWatchAPI) PutDashboardRequest(arg1 *cloudwatch.PutDashboardInput) (*request.Request, *cloudwatch.PutDashboardOutput) {
	fake.putDashboardRequestMutex.Lock()
	ret, specificReturn := fake.putDashboardRequestReturnsOnCall[len(fake.putDashboardRequestArgsForCall)]
	fake.putDashboardRequestArgsForCall = append(fake.putDashboardRequestArgsForCall, struct {
		arg1 *cloudwatch.PutDashboardInput
	}{arg1})
	fake.recordInvocation("PutDashboardRequest", []interface{}{arg1})
	fake.putDashboardRequestMutex.Unlock()
	if fake.PutDashboardRequestStub != nil {
		return fake.PutDashboardRequestStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.putDashboardRequestReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeCloudWatchAPI) PutDashboardRequestCallCount() int {
	fake.putDashboardRequestMutex.RLock()
	defer fake.putDashboardRequestMutex.RUnlock()
	return len(fake.putDashboardRequestArgsForCall)
}

func (fake *FakeCloudWatchAPI) PutDashboardRequestCalls(stub func(*cloudwatch.PutDashboardInput) (*request.Request, *cloudwatch.PutDashboardOutput)) {
	fake.putDashboardRequestMutex.Lock()
	defer fake.putDashboardRequestMutex.Unlock()
	fake.PutDashboardRequestStub = stub
}

func (fake *FakeCloudWatchAPI) PutDashboardRequestArgsForCall(i int) *cloudwatch.PutDashboardInput {
	fake.putDashboardRequestMutex.RLock()
	defer fake.putDashboardRequestMutex.RUnlock()
	argsForCall := fake.putDashboardRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeCloudWatchAPI) PutDashboardRequestReturns(result1 *request.Request, result2 *cloudwatch.PutDashboardOutput) {
	fake.putDashboardRequestMutex.Lock()
	defer fake.putDashboardRequestMutex.Unlock()
	fake.PutDashboardRequestStub = nil
	fake.putDashboardRequestReturns = struct {
		result1 *request.Request
		result2 *cloudwatch.PutDashboardOutput
	}{result1, result2}
}

func (fake *FakeCloudWatchAPI) PutDashboardRequestReturnsOnCall(i int, result1 *request.Request, result2 *cloudwatch.PutDashboardOutput) {
	fake.putDashboardRequestMutex.Lock()
	defer fake.putDashboardRequestMutex.Unlock()
	fake.PutDashboardRequestStub = nil
	if fake.putDashboardRequestReturnsOnCall == nil {
		fake.putDashboardRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *cloudwatch.PutDashboardOutput
		})
	}
	fake.putDashboardRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *cloudwatch.PutDashboardOutput
	}{result1, result2}
}

func (fake *FakeCloudWatchAPI) PutDashboardWithContext(arg1 context.Context, arg2 *cloudwatch.PutDashboardInput, arg3 ...request.Option) (*cloudwatch.PutDashboardOutput, error) {
	fake.putDashboardWithContextMutex.Lock()
	ret, specificReturn := fake.putDashboardWithContextReturnsOnCall[len(fake.putDashboardWithContextArgsForCall)]
	fake.putDashboardWithContextArgsForCall = append(fake.putDashboardWithContextArgsForCall, struct {
		arg1 context.Context
		arg2 *cloudwatch.PutDashboardInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	fake.recordInvocation("PutDashboardWithContext", []interface{}{arg1, arg2, arg3})
	fake.putDashboardWithContextMutex.Unlock()
	if fake.PutDashboardWithContextStub != nil {
		return fake.PutDashboardWithContextStub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.putDashboardWithContextReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeCloudWatchAPI) PutDashboardWithContextCallCount() int {
	fake.putDashboardWithContextMutex.RLock()
	defer fake.putDashboardWithContextMutex.RUnlock()
	return len(fake.putDashboardWithContextArgsForCall)
}

func (fake *FakeCloudWatchAPI) PutDashboardWithContextCalls(stub func(context.Context, *cloudwatch.PutDashboardInput, ...request.Option) (*cloudwatch.PutDashboardOutput, error)) {
	fake.putDashboardWithContextMutex.Lock()
	defer fake.putDashboardWithContextMutex.Unlock()
	fake.PutDashboardWithContextStub = stub
}

func (fake *FakeCloudWatchAPI) PutDashboardWithContextArgsForCall(i int) (context.Context, *cloudwatch.PutDashboardInput, []request.Option) {
	fake.putDashboardWithContextMutex.RLock()
	defer fake.putDashboardWithContextMutex.RUnlock()
	argsForCall := fake.putDashboardWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeCloudWatchAPI) PutDashboardWithContextReturns(result1 *cloudwatch.PutDashboardOutput, result2 error) {
	fake.putDashboardWithContextMutex.Lock()
	defer fake.putDashboardWithContextMutex.Unlock()
	fake.PutDashboardWithContextStub = nil
	fake.putDashboardWithContextReturns = struct {
		result1 *cloudwatch.PutDashboardOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeCloudWatchAPI) PutDashboardWithContextReturnsOnCall(i int, result1 *cloudwatch.PutDashboardOutput, result2 error) {
	fake.putDashboardWithContextMutex.Lock()
	defer fake.putDashboardWithContextMutex.Unlock()
	fake.PutDashboardWithContextStub = nil
	if fake.putDashboardWithContextReturnsOnCall == nil {
		fake.putDashboardWithContextReturnsOnCall = make(map[int]struct {
			result1 *cloudwatch.PutDashboardOutput
			result2 error
		})
	}
	fake.putDashboardWithContextReturnsOnCall[i] = struct {
		result1 *cloudwatch.PutDashboardOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeCloudWatchAPI) PutMetricAlarm(arg1 *cloudwatch.PutMetricAlarmInput) (*cloudwatch.PutMetricAlarmOutput, error) {
	fake.putMetricAlarmMutex.Lock()
	ret, specificReturn := fake.putMetricAlarmReturnsOnCall[len(fake.putMetricAlarmArgsForCall)]
	fake.putMetricAlarmArgsForCall = append(fake.putMetricAlarmArgsForCall, struct {
		arg1 *cloudwatch.PutMetricAlarmInput
	}{arg1})
	fake.recordInvocation("PutMetricAlarm", []interface{}{arg1})
	fake.putMetricAlarmMutex.Unlock()
	if fake.PutMetricAlarmStub != nil {
		return fake.PutMetricAlarmStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.putMetricAlarmReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeCloudWatchAPI) PutMetricAlarmCallCount() int {
	fake.putMetricAlarmMutex.RLock()
	defer fake.putMetricAlarmMutex.RUnlock()
	return len(fake.putMetricAlarmArgsForCall)
}

func (fake *FakeCloudWatchAPI) PutMetricAlarmCalls(stub func(*cloudwatch.PutMetricAlarmInput) (*cloudwatch.PutMetricAlarmOutput, error)) {
	fake.putMetricAlarmMutex.Lock()
	defer fake.putMetricAlarmMutex.Unlock()
	fake.PutMetricAlarmStub = stub
}

func (fake *FakeCloudWatchAPI) PutMetricAlarmArgsForCall(i int) *cloudwatch.PutMetricAlarmInput {
	fake.putMetricAlarmMutex.RLock()
	defer fake.putMetricAlarmMutex.RUnlock()
	argsForCall := fake.putMetricAlarmArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeCloudWatchAPI) PutMetricAlarmReturns(result1 *cloudwatch.PutMetricAlarmOutput, result2 error) {
	fake.putMetricAlarmMutex.Lock()
	defer fake.putMetricAlarmMutex.Unlock()
	fake.PutMetricAlarmStub = nil
	fake.putMetricAlarmReturns = struct {
		result1 *cloudwatch.PutMetricAlarmOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeCloudWatchAPI) PutMetricAlarmReturnsOnCall(i int, result1 *cloudwatch.PutMetricAlarmOutput, result2 error) {
	fake.putMetricAlarmMutex.Lock()
	defer fake.putMetricAlarmMutex.Unlock()
	fake.PutMetricAlarmStub = nil
	if fake.putMetricAlarmReturnsOnCall == nil {
		fake.putMetricAlarmReturnsOnCall = make(map[int]struct {
			result1 *cloudwatch.PutMetricAlarmOutput
			result2 error
		})
	}
	fake.putMetricAlarmReturnsOnCall[i] = struct {
		result1 *cloudwatch.PutMetricAlarmOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeCloudWatchAPI) PutMetricAlarmRequest(arg1 *cloudwatch.PutMetricAlarmInput) (*request.Request, *cloudwatch.PutMetricAlarmOutput) {
	fake.putMetricAlarmRequestMutex.Lock()
	ret, specificReturn := fake.putMetricAlarmRequestReturnsOnCall[len(fake.putMetricAlarmRequestArgsForCall)]
	fake.putMetricAlarmRequestArgsForCall = append(fake.putMetricAlarmRequestArgsForCall, struct {
		arg1 *cloudwatch.PutMetricAlarmInput
	}{arg1})
	fake.recordInvocation("PutMetricAlarmRequest", []interface{}{arg1})
	fake.putMetricAlarmRequestMutex.Unlock()
	if fake.PutMetricAlarmRequestStub != nil {
		return fake.PutMetricAlarmRequestStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.putMetricAlarmRequestReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeCloudWatchAPI) PutMetricAlarmRequestCallCount() int {
	fake.putMetricAlarmRequestMutex.RLock()
	defer fake.putMetricAlarmRequestMutex.RUnlock()
	return len(fake.putMetricAlarmRequestArgsForCall)
}

func (fake *FakeCloudWatchAPI) PutMetricAlarmRequestCalls(stub func(*cloudwatch.PutMetricAlarmInput) (*request.Request, *cloudwatch.PutMetricAlarmOutput)) {
	fake.putMetricAlarmRequestMutex.Lock()
	defer fake.putMetricAlarmRequestMutex.Unlock()
	fake.PutMetricAlarmRequestStub = stub
}

func (fake *FakeCloudWatchAPI) PutMetricAlarmRequestArgsForCall(i int) *cloudwatch.PutMetricAlarmInput {
	fake.putMetricAlarmRequestMutex.RLock()
	defer fake.putMetricAlarmRequestMutex.RUnlock()
	argsForCall := fake.putMetricAlarmRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeCloudWatchAPI) PutMetricAlarmRequestReturns(result1 *request.Request, result2 *cloudwatch.PutMetricAlarmOutput) {
	fake.putMetricAlarmRequestMutex.Lock()
	defer fake.putMetricAlarmRequestMutex.Unlock()
	fake.PutMetricAlarmRequestStub = nil
	fake.putMetricAlarmRequestReturns = struct {
		result1 *request.Request
		result2 *cloudwatch.PutMetricAlarmOutput
	}{result1, result2}
}

func (fake *FakeCloudWatchAPI) PutMetricAlarmRequestReturnsOnCall(i int, result1 *request.Request, result2 *cloudwatch.PutMetricAlarmOutput) {
	fake.putMetricAlarmRequestMutex.Lock()
	defer fake.putMetricAlarmRequestMutex.Unlock()
	fake.PutMetricAlarmRequestStub = nil
	if fake.putMetricAlarmRequestReturnsOnCall == nil {
		fake.putMetricAlarmRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *cloudwatch.PutMetricAlarmOutput
		})
	}
	fake.putMetricAlarmRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *cloudwatch.PutMetricAlarmOutput
	}{result1, result2}
}

func (fake *FakeCloudWatchAPI) PutMetricAlarmWithContext(arg1 context.Context, arg2 *cloudwatch.PutMetricAlarmInput, arg3 ...request.Option) (*cloudwatch.PutMetricAlarmOutput, error) {
	fake.putMetricAlarmWithContextMutex.Lock()
	ret, specificReturn := fake.putMetricAlarmWithContextReturnsOnCall[len(fake.putMetricAlarmWithContextArgsForCall)]
	fake.putMetricAlarmWithContextArgsForCall = append(fake.putMetricAlarmWithContextArgsForCall, struct {
		arg1 context.Context
		arg2 *cloudwatch.PutMetricAlarmInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	fake.recordInvocation("PutMetricAlarmWithContext", []interface{}{arg1, arg2, arg3})
	fake.putMetricAlarmWithContextMutex.Unlock()
	if fake.PutMetricAlarmWithContextStub != nil {
		return fake.PutMetricAlarmWithContextStub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.putMetricAlarmWithContextReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeCloudWatchAPI) PutMetricAlarmWithContextCallCount() int {
	fake.putMetricAlarmWithContextMutex.RLock()
	defer fake.putMetricAlarmWithContextMutex.RUnlock()
	return len(fake.putMetricAlarmWithContextArgsForCall)
}

func (fake *FakeCloudWatchAPI) PutMetricAlarmWithContextCalls(stub func(context.Context, *cloudwatch.PutMetricAlarmInput, ...request.Option) (*cloudwatch.PutMetricAlarmOutput, error)) {
	fake.putMetricAlarmWithContextMutex.Lock()
	defer fake.putMetricAlarmWithContextMutex.Unlock()
	fake.PutMetricAlarmWithContextStub = stub
}

func (fake *FakeCloudWatchAPI) PutMetricAlarmWithContextArgsForCall(i int) (context.Context, *cloudwatch.PutMetricAlarmInput, []request.Option) {
	fake.putMetricAlarmWithContextMutex.RLock()
	defer fake.putMetricAlarmWithContextMutex.RUnlock()
	argsForCall := fake.putMetricAlarmWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeCloudWatchAPI) PutMetricAlarmWithContextReturns(result1 *cloudwatch.PutMetricAlarmOutput, result2 error) {
	fake.putMetricAlarmWithContextMutex.Lock()
	defer fake.putMetricAlarmWithContextMutex.Unlock()
	fake.PutMetricAlarmWithContextStub = nil
	fake.putMetricAlarmWithContextReturns = struct {
		result1 *cloudwatch.PutMetricAlarmOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeCloudWatchAPI) PutMetricAlarmWithContextReturnsOnCall(i int, result1 *cloudwatch.PutMetricAlarmOutput, result2 error) {
	fake.putMetricAlarmWithContextMutex.Lock()
	defer fake.putMetricAlarmWithContextMutex.Unlock()
	fake.PutMetricAlarmWithContextStub = nil
	if fake.putMetricAlarmWithContextReturnsOnCall == nil {
		fake.putMetricAlarmWithContextReturnsOnCall = make(map[int]struct {
			result1 *cloudwatch.PutMetricAlarmOutput
			result2 error
		})
	}
	fake.putMetricAlarmWithContextReturnsOnCall[i] = struct {
		result1 *cloudwatch.PutMetricAlarmOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeCloudWatchAPI) PutMetricData(arg1 *cloudwatch.PutMetricDataInput) (*cloudwatch.PutMetricDataOutput, error) {
	fake.putMetricDataMutex.Lock()
	ret, specificReturn := fake.putMetricDataReturnsOnCall[len(fake.putMetricDataArgsForCall)]
	fake.putMetricDataArgsForCall = append(fake.putMetricDataArgsForCall, struct {
		arg1 *cloudwatch.PutMetricDataInput
	}{arg1})
	fake.recordInvocation("PutMetricData", []interface{}{arg1})
	fake.putMetricDataMutex.Unlock()
	if fake.PutMetricDataStub != nil {
		return fake.PutMetricDataStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.putMetricDataReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeCloudWatchAPI) PutMetricDataCallCount() int {
	fake.putMetricDataMutex.RLock()
	defer fake.putMetricDataMutex.RUnlock()
	return len(fake.putMetricDataArgsForCall)
}

func (fake *FakeCloudWatchAPI) PutMetricDataCalls(stub func(*cloudwatch.PutMetricDataInput) (*cloudwatch.PutMetricDataOutput, error)) {
	fake.putMetricDataMutex.Lock()
	defer fake.putMetricDataMutex.Unlock()
	fake.PutMetricDataStub = stub
}

func (fake *FakeCloudWatchAPI) PutMetricDataArgsForCall(i int) *cloudwatch.PutMetricDataInput {
	fake.putMetricDataMutex.RLock()
	defer fake.putMetricDataMutex.RUnlock()
	argsForCall := fake.putMetricDataArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeCloudWatchAPI) PutMetricDataReturns(result1 *cloudwatch.PutMetricDataOutput, result2 error) {
	fake.putMetricDataMutex.Lock()
	defer fake.putMetricDataMutex.Unlock()
	fake.PutMetricDataStub = nil
	fake.putMetricDataReturns = struct {
		result1 *cloudwatch.PutMetricDataOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeCloudWatchAPI) PutMetricDataReturnsOnCall(i int, result1 *cloudwatch.PutMetricDataOutput, result2 error) {
	fake.putMetricDataMutex.Lock()
	defer fake.putMetricDataMutex.Unlock()
	fake.PutMetricDataStub = nil
	if fake.putMetricDataReturnsOnCall == nil {
		fake.putMetricDataReturnsOnCall = make(map[int]struct {
			result1 *cloudwatch.PutMetricDataOutput
			result2 error
		})
	}
	fake.putMetricDataReturnsOnCall[i] = struct {
		result1 *cloudwatch.PutMetricDataOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeCloudWatchAPI) PutMetricDataRequest(arg1 *cloudwatch.PutMetricDataInput) (*request.Request, *cloudwatch.PutMetricDataOutput) {
	fake.putMetricDataRequestMutex.Lock()
	ret, specificReturn := fake.putMetricDataRequestReturnsOnCall[len(fake.putMetricDataRequestArgsForCall)]
	fake.putMetricDataRequestArgsForCall = append(fake.putMetricDataRequestArgsForCall, struct {
		arg1 *cloudwatch.PutMetricDataInput
	}{arg1})
	fake.recordInvocation("PutMetricDataRequest", []interface{}{arg1})
	fake.putMetricDataRequestMutex.Unlock()
	if fake.PutMetricDataRequestStub != nil {
		return fake.PutMetricDataRequestStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.putMetricDataRequestReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeCloudWatchAPI) PutMetricDataRequestCallCount() int {
	fake.putMetricDataRequestMutex.RLock()
	defer fake.putMetricDataRequestMutex.RUnlock()
	return len(fake.putMetricDataRequestArgsForCall)
}

func (fake *FakeCloudWatchAPI) PutMetricDataRequestCalls(stub func(*cloudwatch.PutMetricDataInput) (*request.Request, *cloudwatch.PutMetricDataOutput)) {
	fake.putMetricDataRequestMutex.Lock()
	defer fake.putMetricDataRequestMutex.Unlock()
	fake.PutMetricDataRequestStub = stub
}

func (fake *FakeCloudWatchAPI) PutMetricDataRequestArgsForCall(i int) *cloudwatch.PutMetricDataInput {
	fake.putMetricDataRequestMutex.RLock()
	defer fake.putMetricDataRequestMutex.RUnlock()
	argsForCall := fake.putMetricDataRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeCloudWatchAPI) PutMetricDataRequestReturns(result1 *request.Request, result2 *cloudwatch.PutMetricDataOutput) {
	fake.putMetricDataRequestMutex.Lock()
	defer fake.putMetricDataRequestMutex.Unlock()
	fake.PutMetricDataRequestStub = nil
	fake.putMetricDataRequestReturns = struct {
		result1 *request.Request
		result2 *cloudwatch.PutMetricDataOutput
	}{result1, result2}
}

func (fake *FakeCloudWatchAPI) PutMetricDataRequestReturnsOnCall(i int, result1 *request.Request, result2 *cloudwatch.PutMetricDataOutput) {
	fake.putMetricDataRequestMutex.Lock()
	defer fake.putMetricDataRequestMutex.Unlock()
	fake.PutMetricDataRequestStub = nil
	if fake.putMetricDataRequestReturnsOnCall == nil {
		fake.putMetricDataRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *cloudwatch.PutMetricDataOutput
		})
	}
	fake.putMetricDataRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *cloudwatch.PutMetricDataOutput
	}{result1, result2}
}

func (fake *FakeCloudWatchAPI) PutMetricDataWithContext(arg1 context.Context, arg2 *cloudwatch.PutMetricDataInput, arg3 ...request.Option) (*cloudwatch.PutMetricDataOutput, error) {
	fake.putMetricDataWithContextMutex.Lock()
	ret, specificReturn := fake.putMetricDataWithContextReturnsOnCall[len(fake.putMetricDataWithContextArgsForCall)]
	fake.putMetricDataWithContextArgsForCall = append(fake.putMetricDataWithContextArgsForCall, struct {
		arg1 context.Context
		arg2 *cloudwatch.PutMetricDataInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	fake.recordInvocation("PutMetricDataWithContext", []interface{}{arg1, arg2, arg3})
	fake.putMetricDataWithContextMutex.Unlock()
	if fake.PutMetricDataWithContextStub != nil {
		return fake.PutMetricDataWithContextStub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.putMetricDataWithContextReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeCloudWatchAPI) PutMetricDataWithContextCallCount() int {
	fake.putMetricDataWithContextMutex.RLock()
	defer fake.putMetricDataWithContextMutex.RUnlock()
	return len(fake.putMetricDataWithContextArgsForCall)
}

func (fake *FakeCloudWatchAPI) PutMetricDataWithContextCalls(stub func(context.Context, *cloudwatch.PutMetricDataInput, ...request.Option) (*cloudwatch.PutMetricDataOutput, error)) {
	fake.putMetricDataWithContextMutex.Lock()
	defer fake.putMetricDataWithContextMutex.Unlock()
	fake.PutMetricDataWithContextStub = stub
}

func (fake *FakeCloudWatchAPI) PutMetricDataWithContextArgsForCall(i int) (context.Context, *cloudwatch.PutMetricDataInput, []request.Option) {
	fake.putMetricDataWithContextMutex.RLock()
	defer fake.putMetricDataWithContextMutex.RUnlock()
	argsForCall := fake.putMetricDataWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeCloudWatchAPI) PutMetricDataWithContextReturns(result1 *cloudwatch.PutMetricDataOutput, result2 error) {
	fake.putMetricDataWithContextMutex.Lock()
	defer fake.putMetricDataWithContextMutex.Unlock()
	fake.PutMetricDataWithContextStub = nil
	fake.putMetricDataWithContextReturns = struct {
		result1 *cloudwatch.PutMetricDataOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeCloudWatchAPI) PutMetricDataWithContextReturnsOnCall(i int, result1 *cloudwatch.PutMetricDataOutput, result2 error) {
	fake.putMetricDataWithContextMutex.Lock()
	defer fake.putMetricDataWithContextMutex.Unlock()
	fake.PutMetricDataWithContextStub = nil
	if fake.putMetricDataWithContextReturnsOnCall == nil {
		fake.putMetricDataWithContextReturnsOnCall = make(map[int]struct {
			result1 *cloudwatch.PutMetricDataOutput
			result2 error
		})
	}
	fake.putMetricDataWithContextReturnsOnCall[i] = struct {
		result1 *cloudwatch.PutMetricDataOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeCloudWatchAPI) SetAlarmState(arg1 *cloudwatch.SetAlarmStateInput) (*cloudwatch.SetAlarmStateOutput, error) {
	fake.setAlarmStateMutex.Lock()
	ret, specificReturn := fake.setAlarmStateReturnsOnCall[len(fake.setAlarmStateArgsForCall)]
	fake.setAlarmStateArgsForCall = append(fake.setAlarmStateArgsForCall, struct {
		arg1 *cloudwatch.SetAlarmStateInput
	}{arg1})
	fake.recordInvocation("SetAlarmState", []interface{}{arg1})
	fake.setAlarmStateMutex.Unlock()
	if fake.SetAlarmStateStub != nil {
		return fake.SetAlarmStateStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.setAlarmStateReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeCloudWatchAPI) SetAlarmStateCallCount() int {
	fake.setAlarmStateMutex.RLock()
	defer fake.setAlarmStateMutex.RUnlock()
	return len(fake.setAlarmStateArgsForCall)
}

func (fake *FakeCloudWatchAPI) SetAlarmStateCalls(stub func(*cloudwatch.SetAlarmStateInput) (*cloudwatch.SetAlarmStateOutput, error)) {
	fake.setAlarmStateMutex.Lock()
	defer fake.setAlarmStateMutex.Unlock()
	fake.SetAlarmStateStub = stub
}

func (fake *FakeCloudWatchAPI) SetAlarmStateArgsForCall(i int) *cloudwatch.SetAlarmStateInput {
	fake.setAlarmStateMutex.RLock()
	defer fake.setAlarmStateMutex.RUnlock()
	argsForCall := fake.setAlarmStateArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeCloudWatchAPI) SetAlarmStateReturns(result1 *cloudwatch.SetAlarmStateOutput, result2 error) {
	fake.setAlarmStateMutex.Lock()
	defer fake.setAlarmStateMutex.Unlock()
	fake.SetAlarmStateStub = nil
	fake.setAlarmStateReturns = struct {
		result1 *cloudwatch.SetAlarmStateOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeCloudWatchAPI) SetAlarmStateReturnsOnCall(i int, result1 *cloudwatch.SetAlarmStateOutput, result2 error) {
	fake.setAlarmStateMutex.Lock()
	defer fake.setAlarmStateMutex.Unlock()
	fake.SetAlarmStateStub = nil
	if fake.setAlarmStateReturnsOnCall == nil {
		fake.setAlarmStateReturnsOnCall = make(map[int]struct {
			result1 *cloudwatch.SetAlarmStateOutput
			result2 error
		})
	}
	fake.setAlarmStateReturnsOnCall[i] = struct {
		result1 *cloudwatch.SetAlarmStateOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeCloudWatchAPI) SetAlarmStateRequest(arg1 *cloudwatch.SetAlarmStateInput) (*request.Request, *cloudwatch.SetAlarmStateOutput) {
	fake.setAlarmStateRequestMutex.Lock()
	ret, specificReturn := fake.setAlarmStateRequestReturnsOnCall[len(fake.setAlarmStateRequestArgsForCall)]
	fake.setAlarmStateRequestArgsForCall = append(fake.setAlarmStateRequestArgsForCall, struct {
		arg1 *cloudwatch.SetAlarmStateInput
	}{arg1})
	fake.recordInvocation("SetAlarmStateRequest", []interface{}{arg1})
	fake.setAlarmStateRequestMutex.Unlock()
	if fake.SetAlarmStateRequestStub != nil {
		return fake.SetAlarmStateRequestStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.setAlarmStateRequestReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeCloudWatchAPI) SetAlarmStateRequestCallCount() int {
	fake.setAlarmStateRequestMutex.RLock()
	defer fake.setAlarmStateRequestMutex.RUnlock()
	return len(fake.setAlarmStateRequestArgsForCall)
}

func (fake *FakeCloudWatchAPI) SetAlarmStateRequestCalls(stub func(*cloudwatch.SetAlarmStateInput) (*request.Request, *cloudwatch.SetAlarmStateOutput)) {
	fake.setAlarmStateRequestMutex.Lock()
	defer fake.setAlarmStateRequestMutex.Unlock()
	fake.SetAlarmStateRequestStub = stub
}

func (fake *FakeCloudWatchAPI) SetAlarmStateRequestArgsForCall(i int) *cloudwatch.SetAlarmStateInput {
	fake.setAlarmStateRequestMutex.RLock()
	defer fake.setAlarmStateRequestMutex.RUnlock()
	argsForCall := fake.setAlarmStateRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeCloudWatchAPI) SetAlarmStateRequestReturns(result1 *request.Request, result2 *cloudwatch.SetAlarmStateOutput) {
	fake.setAlarmStateRequestMutex.Lock()
	defer fake.setAlarmStateRequestMutex.Unlock()
	fake.SetAlarmStateRequestStub = nil
	fake.setAlarmStateRequestReturns = struct {
		result1 *request.Request
		result2 *cloudwatch.SetAlarmStateOutput
	}{result1, result2}
}

func (fake *FakeCloudWatchAPI) SetAlarmStateRequestReturnsOnCall(i int, result1 *request.Request, result2 *cloudwatch.SetAlarmStateOutput) {
	fake.setAlarmStateRequestMutex.Lock()
	defer fake.setAlarmStateRequestMutex.Unlock()
	fake.SetAlarmStateRequestStub = nil
	if fake.setAlarmStateRequestReturnsOnCall == nil {
		fake.setAlarmStateRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *cloudwatch.SetAlarmStateOutput
		})
	}
	fake.setAlarmStateRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *cloudwatch.SetAlarmStateOutput
	}{result1, result2}
}

func (fake *FakeCloudWatchAPI) SetAlarmStateWithContext(arg1 context.Context, arg2 *cloudwatch.SetAlarmStateInput, arg3 ...request.Option) (*cloudwatch.SetAlarmStateOutput, error) {
	fake.setAlarmStateWithContextMutex.Lock()
	ret, specificReturn := fake.setAlarmStateWithContextReturnsOnCall[len(fake.setAlarmStateWithContextArgsForCall)]
	fake.setAlarmStateWithContextArgsForCall = append(fake.setAlarmStateWithContextArgsForCall, struct {
		arg1 context.Context
		arg2 *cloudwatch.SetAlarmStateInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	fake.recordInvocation("SetAlarmStateWithContext", []interface{}{arg1, arg2, arg3})
	fake.setAlarmStateWithContextMutex.Unlock()
	if fake.SetAlarmStateWithContextStub != nil {
		return fake.SetAlarmStateWithContextStub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.setAlarmStateWithContextReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeCloudWatchAPI) SetAlarmStateWithContextCallCount() int {
	fake.setAlarmStateWithContextMutex.RLock()
	defer fake.setAlarmStateWithContextMutex.RUnlock()
	return len(fake.setAlarmStateWithContextArgsForCall)
}

func (fake *FakeCloudWatchAPI) SetAlarmStateWithContextCalls(stub func(context.Context, *cloudwatch.SetAlarmStateInput, ...request.Option) (*cloudwatch.SetAlarmStateOutput, error)) {
	fake.setAlarmStateWithContextMutex.Lock()
	defer fake.setAlarmStateWithContextMutex.Unlock()
	fake.SetAlarmStateWithContextStub = stub
}

func (fake *FakeCloudWatchAPI) SetAlarmStateWithContextArgsForCall(i int) (context.Context, *cloudwatch.SetAlarmStateInput, []request.Option) {
	fake.setAlarmStateWithContextMutex.RLock()
	defer fake.setAlarmStateWithContextMutex.RUnlock()
	argsForCall := fake.setAlarmStateWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeCloudWatchAPI) SetAlarmStateWithContextReturns(result1 *cloudwatch.SetAlarmStateOutput, result2 error) {
	fake.setAlarmStateWithContextMutex.Lock()
	defer fake.setAlarmStateWithContextMutex.Unlock()
	fake.SetAlarmStateWithContextStub = nil
	fake.setAlarmStateWithContextReturns = struct {
		result1 *cloudwatch.SetAlarmStateOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeCloudWatchAPI) SetAlarmStateWithContextReturnsOnCall(i int, result1 *cloudwatch.SetAlarmStateOutput, result2 error) {
	fake.setAlarmStateWithContextMutex.Lock()
	defer fake.setAlarmStateWithContextMutex.Unlock()
	fake.SetAlarmStateWithContextStub = nil
	if fake.setAlarmStateWithContextReturnsOnCall == nil {
		fake.setAlarmStateWithContextReturnsOnCall = make(map[int]struct {
			result1 *cloudwatch.SetAlarmStateOutput
			result2 error
		})
	}
	fake.setAlarmStateWithContextReturnsOnCall[i] = struct {
		result1 *cloudwatch.SetAlarmStateOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeCloudWatchAPI) WaitUntilAlarmExists(arg1 *cloudwatch.DescribeAlarmsInput) error {
	fake.waitUntilAlarmExistsMutex.Lock()
	ret, specificReturn := fake.waitUntilAlarmExistsReturnsOnCall[len(fake.waitUntilAlarmExistsArgsForCall)]
	fake.waitUntilAlarmExistsArgsForCall = append(fake.waitUntilAlarmExistsArgsForCall, struct {
		arg1 *cloudwatch.DescribeAlarmsInput
	}{arg1})
	fake.recordInvocation("WaitUntilAlarmExists", []interface{}{arg1})
	fake.waitUntilAlarmExistsMutex.Unlock()
	if fake.WaitUntilAlarmExistsStub != nil {
		return fake.WaitUntilAlarmExistsStub(arg1)
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.waitUntilAlarmExistsReturns
	return fakeReturns.result1
}

func (fake *FakeCloudWatchAPI) WaitUntilAlarmExistsCallCount() int {
	fake.waitUntilAlarmExistsMutex.RLock()
	defer fake.waitUntilAlarmExistsMutex.RUnlock()
	return len(fake.waitUntilAlarmExistsArgsForCall)
}

func (fake *FakeCloudWatchAPI) WaitUntilAlarmExistsCalls(stub func(*cloudwatch.DescribeAlarmsInput) error) {
	fake.waitUntilAlarmExistsMutex.Lock()
	defer fake.waitUntilAlarmExistsMutex.Unlock()
	fake.WaitUntilAlarmExistsStub = stub
}

func (fake *FakeCloudWatchAPI) WaitUntilAlarmExistsArgsForCall(i int) *cloudwatch.DescribeAlarmsInput {
	fake.waitUntilAlarmExistsMutex.RLock()
	defer fake.waitUntilAlarmExistsMutex.RUnlock()
	argsForCall := fake.waitUntilAlarmExistsArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeCloudWatchAPI) WaitUntilAlarmExistsReturns(result1 error) {
	fake.waitUntilAlarmExistsMutex.Lock()
	defer fake.waitUntilAlarmExistsMutex.Unlock()
	fake.WaitUntilAlarmExistsStub = nil
	fake.waitUntilAlarmExistsReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeCloudWatchAPI) WaitUntilAlarmExistsReturnsOnCall(i int, result1 error) {
	fake.waitUntilAlarmExistsMutex.Lock()
	defer fake.waitUntilAlarmExistsMutex.Unlock()
	fake.WaitUntilAlarmExistsStub = nil
	if fake.waitUntilAlarmExistsReturnsOnCall == nil {
		fake.waitUntilAlarmExistsReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.waitUntilAlarmExistsReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeCloudWatchAPI) WaitUntilAlarmExistsWithContext(arg1 context.Context, arg2 *cloudwatch.DescribeAlarmsInput, arg3 ...request.WaiterOption) error {
	fake.waitUntilAlarmExistsWithContextMutex.Lock()
	ret, specificReturn := fake.waitUntilAlarmExistsWithContextReturnsOnCall[len(fake.waitUntilAlarmExistsWithContextArgsForCall)]
	fake.waitUntilAlarmExistsWithContextArgsForCall = append(fake.waitUntilAlarmExistsWithContextArgsForCall, struct {
		arg1 context.Context
		arg2 *cloudwatch.DescribeAlarmsInput
		arg3 []request.WaiterOption
	}{arg1, arg2, arg3})
	fake.recordInvocation("WaitUntilAlarmExistsWithContext", []interface{}{arg1, arg2, arg3})
	fake.waitUntilAlarmExistsWithContextMutex.Unlock()
	if fake.WaitUntilAlarmExistsWithContextStub != nil {
		return fake.WaitUntilAlarmExistsWithContextStub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.waitUntilAlarmExistsWithContextReturns
	return fakeReturns.result1
}

func (fake *FakeCloudWatchAPI) WaitUntilAlarmExistsWithContextCallCount() int {
	fake.waitUntilAlarmExistsWithContextMutex.RLock()
	defer fake.waitUntilAlarmExistsWithContextMutex.RUnlock()
	return len(fake.waitUntilAlarmExistsWithContextArgsForCall)
}

func (fake *FakeCloudWatchAPI) WaitUntilAlarmExistsWithContextCalls(stub func(context.Context, *cloudwatch.DescribeAlarmsInput, ...request.WaiterOption) error) {
	fake.waitUntilAlarmExistsWithContextMutex.Lock()
	defer fake.waitUntilAlarmExistsWithContextMutex.Unlock()
	fake.WaitUntilAlarmExistsWithContextStub = stub
}

func (fake *FakeCloudWatchAPI) WaitUntilAlarmExistsWithContextArgsForCall(i int) (context.Context, *cloudwatch.DescribeAlarmsInput, []request.WaiterOption) {
	fake.waitUntilAlarmExistsWithContextMutex.RLock()
	defer fake.waitUntilAlarmExistsWithContextMutex.RUnlock()
	argsForCall := fake.waitUntilAlarmExistsWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeCloudWatchAPI) WaitUntilAlarmExistsWithContextReturns(result1 error) {
	fake.waitUntilAlarmExistsWithContextMutex.Lock()
	defer fake.waitUntilAlarmExistsWithContextMutex.Unlock()
	fake.WaitUntilAlarmExistsWithContextStub = nil
	fake.waitUntilAlarmExistsWithContextReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeCloudWatchAPI) WaitUntilAlarmExistsWithContextReturnsOnCall(i int, result1 error) {
	fake.waitUntilAlarmExistsWithContextMutex.Lock()
	defer fake.waitUntilAlarmExistsWithContextMutex.Unlock()
	fake.WaitUntilAlarmExistsWithContextStub = nil
	if fake.waitUntilAlarmExistsWithContextReturnsOnCall == nil {
		fake.waitUntilAlarmExistsWithContextReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.waitUntilAlarmExistsWithContextReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeCloudWatchAPI) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.deleteAlarmsMutex.RLock()
	defer fake.deleteAlarmsMutex.RUnlock()
	fake.deleteAlarmsRequestMutex.RLock()
	defer fake.deleteAlarmsRequestMutex.RUnlock()
	fake.deleteAlarmsWithContextMutex.RLock()
	defer fake.deleteAlarmsWithContextMutex.RUnlock()
	fake.deleteDashboardsMutex.RLock()
	defer fake.deleteDashboardsMutex.RUnlock()
	fake.deleteDashboardsRequestMutex.RLock()
	defer fake.deleteDashboardsRequestMutex.RUnlock()
	fake.deleteDashboardsWithContextMutex.RLock()
	defer fake.deleteDashboardsWithContextMutex.RUnlock()
	fake.describeAlarmHistoryMutex.RLock()
	defer fake.describeAlarmHistoryMutex.RUnlock()
	fake.describeAlarmHistoryPagesMutex.RLock()
	defer fake.describeAlarmHistoryPagesMutex.RUnlock()
	fake.describeAlarmHistoryPagesWithContextMutex.RLock()
	defer fake.describeAlarmHistoryPagesWithContextMutex.RUnlock()
	fake.describeAlarmHistoryRequestMutex.RLock()
	defer fake.describeAlarmHistoryRequestMutex.RUnlock()
	fake.describeAlarmHistoryWithContextMutex.RLock()
	defer fake.describeAlarmHistoryWithContextMutex.RUnlock()
	fake.describeAlarmsMutex.RLock()
	defer fake.describeAlarmsMutex.RUnlock()
	fake.describeAlarmsForMetricMutex.RLock()
	defer fake.describeAlarmsForMetricMutex.RUnlock()
	fake.describeAlarmsForMetricRequestMutex.RLock()
	defer fake.describeAlarmsForMetricRequestMutex.RUnlock()
	fake.describeAlarmsForMetricWithContextMutex.RLock()
	defer fake.describeAlarmsForMetricWithContextMutex.RUnlock()
	fake.describeAlarmsPagesMutex.RLock()
	defer fake.describeAlarmsPagesMutex.RUnlock()
	fake.describeAlarmsPagesWithContextMutex.RLock()
	defer fake.describeAlarmsPagesWithContextMutex.RUnlock()
	fake.describeAlarmsRequestMutex.RLock()
	defer fake.describeAlarmsRequestMutex.RUnlock()
	fake.describeAlarmsWithContextMutex.RLock()
	defer fake.describeAlarmsWithContextMutex.RUnlock()
	fake.disableAlarmActionsMutex.RLock()
	defer fake.disableAlarmActionsMutex.RUnlock()
	fake.disableAlarmActionsRequestMutex.RLock()
	defer fake.disableAlarmActionsRequestMutex.RUnlock()
	fake.disableAlarmActionsWithContextMutex.RLock()
	defer fake.disableAlarmActionsWithContextMutex.RUnlock()
	fake.enableAlarmActionsMutex.RLock()
	defer fake.enableAlarmActionsMutex.RUnlock()
	fake.enableAlarmActionsRequestMutex.RLock()
	defer fake.enableAlarmActionsRequestMutex.RUnlock()
	fake.enableAlarmActionsWithContextMutex.RLock()
	defer fake.enableAlarmActionsWithContextMutex.RUnlock()
	fake.getDashboardMutex.RLock()
	defer fake.getDashboardMutex.RUnlock()
	fake.getDashboardRequestMutex.RLock()
	defer fake.getDashboardRequestMutex.RUnlock()
	fake.getDashboardWithContextMutex.RLock()
	defer fake.getDashboardWithContextMutex.RUnlock()
	fake.getMetricDataMutex.RLock()
	defer fake.getMetricDataMutex.RUnlock()
	fake.getMetricDataRequestMutex.RLock()
	defer fake.getMetricDataRequestMutex.RUnlock()
	fake.getMetricDataWithContextMutex.RLock()
	defer fake.getMetricDataWithContextMutex.RUnlock()
	fake.getMetricStatisticsMutex.RLock()
	defer fake.getMetricStatisticsMutex.RUnlock()
	fake.getMetricStatisticsRequestMutex.RLock()
	defer fake.getMetricStatisticsRequestMutex.RUnlock()
	fake.getMetricStatisticsWithContextMutex.RLock()
	defer fake.getMetricStatisticsWithContextMutex.RUnlock()
	fake.getMetricWidgetImageMutex.RLock()
	defer fake.getMetricWidgetImageMutex.RUnlock()
	fake.getMetricWidgetImageRequestMutex.RLock()
	defer fake.getMetricWidgetImageRequestMutex.RUnlock()
	fake.getMetricWidgetImageWithContextMutex.RLock()
	defer fake.getMetricWidgetImageWithContextMutex.RUnlock()
	fake.listDashboardsMutex.RLock()
	defer fake.listDashboardsMutex.RUnlock()
	fake.listDashboardsRequestMutex.RLock()
	defer fake.listDashboardsRequestMutex.RUnlock()
	fake.listDashboardsWithContextMutex.RLock()
	defer fake.listDashboardsWithContextMutex.RUnlock()
	fake.listMetricsMutex.RLock()
	defer fake.listMetricsMutex.RUnlock()
	fake.listMetricsPagesMutex.RLock()
	defer fake.listMetricsPagesMutex.RUnlock()
	fake.listMetricsPagesWithContextMutex.RLock()
	defer fake.listMetricsPagesWithContextMutex.RUnlock()
	fake.listMetricsRequestMutex.RLock()
	defer fake.listMetricsRequestMutex.RUnlock()
	fake.listMetricsWithContextMutex.RLock()
	defer fake.listMetricsWithContextMutex.RUnlock()
	fake.putDashboardMutex.RLock()
	defer fake.putDashboardMutex.RUnlock()
	fake.putDashboardRequestMutex.RLock()
	defer fake.putDashboardRequestMutex.RUnlock()
	fake.putDashboardWithContextMutex.RLock()
	defer fake.putDashboardWithContextMutex.RUnlock()
	fake.putMetricAlarmMutex.RLock()
	defer fake.putMetricAlarmMutex.RUnlock()
	fake.putMetricAlarmRequestMutex.RLock()
	defer fake.putMetricAlarmRequestMutex.RUnlock()
	fake.putMetricAlarmWithContextMutex.RLock()
	defer fake.putMetricAlarmWithContextMutex.RUnlock()
	fake.putMetricDataMutex.RLock()
	defer fake.putMetricDataMutex.RUnlock()
	fake.putMetricDataRequestMutex.RLock()
	defer fake.putMetricDataRequestMutex.RUnlock()
	fake.putMetricDataWithContextMutex.RLock()
	defer fake.putMetricDataWithContextMutex.RUnlock()
	fake.setAlarmStateMutex.RLock()
	defer fake.setAlarmStateMutex.RUnlock()
	fake.setAlarmStateRequestMutex.RLock()
	defer fake.setAlarmStateRequestMutex.RUnlock()
	fake.setAlarmStateWithContextMutex.RLock()
	defer fake.setAlarmStateWithContextMutex.RUnlock()
	fake.waitUntilAlarmExistsMutex.RLock()
	defer fake.waitUntilAlarmExistsMutex.RUnlock()
	fake.waitUntilAlarmExistsWithContextMutex.RLock()
	defer fake.waitUntilAlarmExistsWithContextMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeCloudWatchAPI) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ cloudwatchiface.CloudWatchAPI = new(FakeCloudWatchAPI)
